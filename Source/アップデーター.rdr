アップデーターとは
	ウィンドウを継承する
	
	+例外部品一覧={}
	+アイコン一覧={}
	
	はじめの手順
		初期化する
		この内容=「[アプリの名前]」
		この設計スケール比率=アプリの設計スケール比率
		このアイコン=アプリのアイコン
		ーー貼り付けた部品に対する操作をここに書きます
	終わり
	初期化する手順
		ーー自動生成された手順です。ここにプログラムを書き加えても消える場合があります
		初期化開始する
		このタスクバー表示を×に変える
		この実質大きさを｛294,121｝に変える
		この種類を「固定」に変える
		この最大化ボタンを×に変える
		この最小化ボタンを×に変える
		このコントロールボックスを×に変える
		この初期位置を「中央」に変える
		この内容を「アップデーター」に変える
		このフォントを「Yu Gothic UI,9」に変える
		この余白を｛10｝に変える
		ステータスラベルというラベルを作る
			その位置と大きさを｛10,10,274,101｝に変える
			その内容を「処理中」に変える
			そのフォントを「Yu Gothic UI,11.25,太字」に変える
			その語尾省略を○に変える
			その文字配置を「中央」に変える
			そのドッキング方向を「全体」に変える
		ピクチャー1というピクチャーを作る
		ピクチャー1を初期化開始する
			その位置と大きさを｛10,111,274,0｝に変える
			その自動調整を「比率維持」に変える
			その移動順を1に変える
			そのフォントを「Yu Gothic UI,9」に変える
			そのドッキング方向を「下」に変える
		ピクチャー1を初期化終了する
		初期化終了する
	終わり
	
	開いた時の手順
		ウィンドウ管理器の部品一覧へ「[自分]」として[ウィンドウ管理器:自分から子部品取得したもの]を設定する
		ウィンドウ管理器:自分を例外部品一覧でデザイン適用する
	終わり
	
	
	-アップデートデータURL:文字列=「https://api.github.com/repos/femtoCommunity/LegendUtil/releases」
	-開発アップデートデータURL:文字列=「https://raw.githubusercontent.com/femtoCommunity/LegendUtil/releases/dev/Releases.ini」
	
	-アップデートデータ取得結果:真偽値=×
	-アップデートデータステータスコード=0
	-アップデートデータ:辞書={}
	-アップデートファイル:辞書={}
	自分で〈【オプション:配列】として〉アップデートデータ取得する手順
		もしオプションが無ならオプション=空の配列
		
		【元アップデートデータ:辞書】
		【アップデートチャンネル】
		【アップデートデータJSON:配列】
		【Rawアップデートデータ】
		【開発アップデートデータアドレス:文字列】=開発アップデートデータURL
		【開発インストーラーURL:文字列】
		【カスタムリリースチャンネル:真偽値】
		
		例外監視
		もしアプリのリリースチャンネルが「beta」またはアプリのリリースチャンネルが「release」なら
			もしメイン設定について「Update」から「ReleaseChannel」を取得したものが「dev」で始まるなら
				アップデートチャンネル=アプリのリリースチャンネル
				
			そうでなければ
				アップデートチャンネル=メイン設定について「Update」から「ReleaseChannel」を取得したもの
				
			もし終わり
			
		他でもしアプリのリリースチャンネルが「dev」で始まるなら
			アップデートチャンネル=「dev」
			
		そうでなければ
			アップデートチャンネル=「release」
			
		もし終わり
		
		もしアップデートチャンネルが「dev」で始まるなら
			カスタムリリースチャンネル=×
			開発アップデートデータアドレス=開発アップデートデータURL
			
			もしメイン設定について「Update」から「CustomReleaseChannelUrl」を取得したもので「 」を「」へ置換したものが「」でないなら
				もし(メイン設定について「Update」から「CustomReleaseChannelUrl」を取得したものが「https://」で始まる)または(メイン設定について「Update」から「CustomReleaseChannelUrl」を取得したものが「http://」で始まる)なら
					開発アップデートデータアドレス=メイン設定について「Update」から「CustomReleaseChannelUrl」を取得したもの
					
				そうでなければ
					開発アップデートデータアドレス=「https://milkeyyy.com/LegendUtil/Update/」&[メイン設定について「Update」から「CustomReleaseChannelUrl」を取得したもの]
					
				もし終わり
				カスタムリリースチャンネル=◯
			もし終わり
			
			もしオプションから「ダウンロード無効」を完全一致で取り出したものの個数が0なら
				HTTPで「[開発アップデートデータアドレス]」を「[アプリのコンフィグフォルダー]Update\Releases.ini」へダウンロードする
			もし終わり
			
			【アップデートデータ設定:設定ファイル】という設定ファイルを作る
				そのファイル名=「[アプリのコンフィグフォルダー]Update\Releases.ini」
			元アップデートデータ={
				「name」=「[アップデートデータ設定について「Latest」から「Version」を取得したもの]-[アップデートデータ設定について「Latest」から「ReleaseChannel」を取得したもの][アップデートデータ設定について「Latest」から「BuildVersion」を取得したもの]」,
				「tag_name」=[アップデートデータ設定について「Latest」から「InternalVersion」を取得したもの],
				「body」=[アップデートデータ設定について「Latest」から「ChangeLog」を取得したもの]
			}
			もしカスタムリリースチャンネルが◯なら
				元アップデートデータ(「assets」)={{「browser_download_url」=[アップデートデータ設定について「Latest」から「InstallerFileUrl」を取得したもの]}}
				
			そうでなければ
				元アップデートデータ(「assets」)={{「browser_download_url」=「https://github.com/femtoCommunity/LegendUtil/raw/releases/dev/Pack/[アップデートデータ設定について「Latest」から「Version」を取得したもの]-[アップデートデータ設定について「Latest」から「ReleaseChannel」を取得したもの][アップデートデータ設定について「Latest」から「BuildVersion」を取得したもの]/[アップデートデータ設定について「Latest」から「InstallerFileName」を取得したもの]」}}
				
			もし終わり
			
		そうでなければ
			// アップデートデータをダウンロード
			Rawアップデートデータ=「[アップデートデータURL]」を{
				「User-Agent」=「LegendUtil-Updater」,
				「Accept」=「application/vnd.github.v3+json」
			}にてHTTPで取得したもの
			
			もしHTTPのステータスコードが200なら
				アップデートデータJSON=RawアップデートデータをJSON形式として読み取ったもの
				もしアップデートデータJSONの個数が0なら
					「アップデートデータを取得できませんでした。[改行]配列の個数が0です。」というエラーを発生させる
				もし終わり
				アップデートデータJSONを逆に並べ替える
				
			そうでなければ
				「サーバーから正常な応答が得られませんでした。[改行]ステータスコード: [HTTPのステータスコード]」というエラーを発生させる
				
			もし終わり
			
			// プレリリースの取得が有効かどうかに応じてアップデートデータを取得
			もしアップデートチャンネルが「beta」なら // Beta (Release含む)
				元アップデートデータ=アップデートデータJSON(アップデートデータJSONの個数)
				
			他でもしアップデートチャンネルが「beta_only」なら // Betaのみ
				// リリースではない最新のプレリリースを探す
				アップデートデータJSONを【データ】へそれぞれ繰り返す
					もしデータ(「prerelease」)が○なら元アップデートデータ=データ
				繰り返し終わり
				// リリースしか無かった場合、最新のリリースをアップデートデータに追加する
				もし元アップデートデータが空なら元アップデートデータ=アップデートデータJSON(アップデートデータJSONの個数)
				
			そうでなければ // Release
				// プレリリースではない最新のリリースを探す
				アップデートデータJSONを【データ】へそれぞれ繰り返す
					もしデータ(「prerelease」)が×なら元アップデートデータ=データ
				繰り返し終わり
				// プレリリースしか無かった場合、最新のプレリリースをアップデートデータに追加する
				もし元アップデートデータが空なら元アップデートデータ=アップデートデータJSON(アップデートデータJSONの個数)
				
			もし終わり
			
		もし終わり
		
		アップデートデータ取得結果=◯
		アップデートデータステータスコード=HTTPのステータスコード
		アップデートデータ=元アップデートデータ
		アップデートファイル=元アップデートデータ(「assets」)(1)
		発生した場合
			アップデートデータ取得結果=×
			アップデートデータステータスコード=「[エラーのメッセージ]」
		監視終わり
	終わり
	
	自分で〈【オプション:辞書】として〉アップデート確認する手順
		【オプション一覧】={「任意」,「定期」,「直接実行」,「デバッグ」,「終了時」}
		
		【内部バージョン】
		【最新内部バージョン:固定小数】
		【最新バージョン】
		【最新完全バージョン】
		【最新インストーラーURL】
		【最新インストーラー名】
		【最新変更内容】
		【アップデートブランチ】
		【アップデートチェックスレッド:スレッド】
		
		もしオプションが無ならオプション=空の辞書
		オプション一覧を【オプション名】へそれぞれ繰り返す
			もしオプションにオプション名が存在しないならオプションへオプション名として×を設定する
		繰り返し終わり
		
		もしアプリのリリースチャンネルが「beta」またはアプリのリリースチャンネルが「release」なら
			もしメイン設定について「Update」から「ReleaseChannel」を取得したものが「dev」で始まるなら
				アップデートブランチ=アプリのリリースチャンネル
				
			そうでなければ
				アップデートブランチ=メイン設定について「Update」から「ReleaseChannel」を取得したもの
				
			もし終わり
			
		他でもしアプリのリリースチャンネルが「dev」で始まるなら
			アップデートブランチ=「dev」
			
		そうでなければ
			アップデートブランチ=「release」
			
		もし終わり
		
		もしアップデートチェック実行中が○でなければ
			アップデートチェックスレッドというスレッドを作る
			アップデートチェックスレッドで『
				アップデートチェック実行中=○
				「アップデートチェック開始」をデバッグログへ出力する
				「- アップデートブランチ: [アップデートブランチ]」をデバッグログへ出力する
				「- オプション: [オプション]」をデバッグログへ出力する
				
				// 強制アップデートの起動引数が指定されている場合は、内部バージョンを0に設定する
				もしアプリの起動引数から「/ForcedUpdate」を完全一致で探したものの個数が1以上なら内部バージョン=0
				そうでなければ内部バージョン=アプリの内部バージョン
				
				もしオプション(「デバッグ」)が○なら
					内部バージョン=1
				もし終わり
				
				// 最新のリリース情報を取得する
				アップデートデータ取得する
				もしアップデートデータ取得結果が×なら
					「アップデートデータを取得できませんでした。[改行]ステータスコード: [アップデートデータステータスコード]」を「警告アイコン」で表示する
					アップデートチェック実行中=×
					アップデーターを閉じる
					×を返す
				もし終わり
				
				「最新内部バージョン=[アップデートデータ(「tag_name」)]」を命令する
				最新バージョン=アップデートデータ(「name」)
				最新完全バージョン=「[最新バージョン] ([最新内部バージョン])」
				最新インストーラーURL=アップデートファイル(「browser_download_url」)
				最新インストーラー名=アップデートファイル(「browser_download_url」)のファイル名だけ
				最新変更内容=アップデートデータ(「body」)
				
				「現在バージョン: [内部バージョン]」をデバッグログへ出力する
				「最新バージョン: [最新内部バージョン]」をデバッグログへ出力する
				
				もしオプション(「任意」)が○ならアップデーターを閉じる
				もし内部バージョン<最新内部バージョンなら
					//「アップデートチェック結果: アップデートあり (最新バージョン: [最新完全バージョン] | 現在バージョン: [総合バージョン] ([内部バージョン]))」を報告する
					もしオプション(「定期」)が○なら
						//通知領域通知タイプ=1
						//タスクトレイ1に「クリックしてアップデート[改行]＜Version [アプリの総合バージョン] → Version [最新バージョン]＞」を「[プログラムのタイトル] の新しいバージョンがあります。」として「情報」で通知する
						//アップデートチェック実行中=×
						
					他でもしオプション(「直接実行」)が○なら
						アップデート実行する
						
					そうでなければ
						アップデート確認画面を{最新バージョン, 最新変更内容}で◯としてアップデート表示する
						/*情報音を鳴らす
						もし「[アプリの名前] の新しいバージョンがリリースされています！[改行]アップデートしますか？[改行][改行]現在のバージョン: [アプリのバージョン表記] ([アプリの内部バージョン])[改行]最新のバージョン: [最新完全バージョン]」を「はいといいえ」で「質問アイコン」にして質問したものが「はい」なら
							アップデート実行する
							
						そうでなければ
							アップデートチェック実行中=×
							
						もし終わり
						○を返す*/
						
					もし終わり
					
				そうでなければ
					//「アップデートチェック結果: アップデートなし (最新バージョン: [最新完全バージョン] | 現在バージョン: [総合バージョン] ([内部バージョン]))」を報告する
					もしオプション(「定期」)が○でないかつオプション(「直接実行」)が○でなければ
						もしオプション(「任意」)が○なら「インストールされている [アプリの名前] は最新のバージョンです！[改行]リリースチャンネル: [アップデートブランチ][改行][改行]現在のバージョン: [アプリのバージョン表記] ([アプリの内部バージョン])[改行]最新のバージョン: [最新完全バージョン]」を「情報アイコン」で表示する
						アップデートチェック実行中=×
						×を返す
						
					そうでなければ
						アップデートチェック実行中=×
						
					もし終わり
					
				もし終わり
				アップデーターを閉じる
				
				もしデバッグが○なら
					内部バージョン=仮内部バージョン
				もし終わり
				アップデートチェック実行中=×
				』を実行する
			
			もしオプション(「任意」)が○なら「アップデートを確認中」でアップデートチェック画面表示する
			
			もしオプション(「直接実行」)が○なら
				「アップデートを確認中」で◯としてアップデートチェック画面表示する
				アップデーターの透明度=0
				アップデートチェック実行中の間繰り返す
					1秒待つ
				繰り返し終わり
			もし終わり
		もし終わり
	終わり
	
	自分でアップデート実行する手順
		【最新インストーラーURL】=アップデートファイル(「browser_download_url」)
		【最新インストーラー名】=アップデートファイル(「browser_download_url」)のファイル名だけ
		
		【インストールフォルダー:文字列】=「[プログラムのフォルダ]」の末尾から1文字消したもの
		インストールフォルダー=[インストールフォルダー]から「\」を前方向へ探したもの
		インストールフォルダー=「[プログラムのフォルダ]」の先頭から(インストールフォルダー-1)文字取り出したもの
		
		もし強制が○ならアップデート確認する
		【アップデート実行スレッド】というスレッドを作る。アップデート実行スレッドで『
			例外監視
				「[最新インストーラーURL]」を「[アプリのコンフィグフォルダー]Update\[最新インストーラー名]」へHTTPでダウンロードする
				「[アプリのコンフィグフォルダー]Update\[最新インストーラー名]」を「/SILENT」として起動する
				アップデーターを閉じる
				終了する
			発生した場合
				もし「[アプリのコンフィグフォルダー]Update\[最新インストーラー名]」というファイルが存在するなら「[アプリのコンフィグフォルダー]Update\[最新インストーラー名]」を削除する
				「アップデートの実行に失敗しました。[改行][改行][エラーのメッセージ]」を「警告アイコン」で表示する
				アップデーターを閉じる
				×を返す
			監視終わり
		』を実行する
		「インストーラーをダウンロード中...」でアップデートチェック画面表示する
		アップデート実行スレッドが実行中の間繰り返す
			1秒待つ
		繰り返し終わり
	終わり
	
	【内容:文字列】で〈【非ダイアログ:真偽値】として〉アップデートチェック画面表示する手順
		自分のステータスラベルの内容=内容
		自分の内容=内容&「 - [アプリの名前]」
		もし非ダイアログなら自分を表示する
		そうでなければ自分をダイアログで表示する
	終わり
終わり