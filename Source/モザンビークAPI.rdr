モザンビークAPIとは
	単一種類
	
	-APIURL:文字列=「[アプリのAPIURL]」
	-ベースAPIURLデータ:文字列=「https://apexlegendsstatus.com」
	
	+エラーマップローテーションデータ:辞書={「_error」=「マップローテーションの取得に失敗しました」}
	+エラーサーバーステータスデータ:辞書={「_error」=「サーバーステータスの取得に失敗しました」}
	+エラーニュースデータ:配列={
		{
			「title」=「ニュースの取得に失敗しました」,
			「link」=「」,
			「img」=「」,
			「short_desc」=「」
		}
	}
	
	ベースAPIURLという属性
		取得する手順
			ベースAPIURLデータを返す
		終わり
	終わり
	
	はじめの手順
		マップローテーション最終取得日時=日時形式(「2000/01/01」)を作る
		サーバーステータス最終取得日時=日時形式(「2000/01/01」)を作る
		ニュースデータ=エラーニュースデータ
		ニュース最終取得日時=日時形式(「2000/01/01」)を作る
	終わり
	
	言語読み込む手順
		// 取得失敗時のエラーメッセージ
		エラーマップローテーションデータ(「_error」)=言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetMapRotation」を取得したもの
		エラーサーバーステータスデータ(「_error」)=言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetServerStatus」を取得したもの
		エラーニュースデータ(「title」)=言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetNews」を取得したもの
	終わり
	
	+マップローテーションゲームモード一覧:配列={}//={「battle_royale」,「ranked」,「ltm」}
	+マップローテーションゲームモード:文字列=「battle_royale」
	+マップローテーションデータ:辞書
	+マップローテーション最終取得日時:日時形式
	自分で〈【遅延:整数】として〉マップローテーション更新する手順
		もし遅延が無でないなら[遅延]秒待つ
		// 10秒間隔を空けないと取得できないようにする
		【経過時間:日時期間形式】=マップローテーション最終取得日時と今の日付差
		もし経過時間の合計秒数が10未満なら
			//「間隔が短すぎます。[改行][10-経過時間の合計秒数の整数]秒後にもう一度お試しください。」というエラーを発生させる
			「モザンビークAPI マップローテーションデータ取得スキップ - 経過時間: [経過時間] 秒」を「警告」としてデバッグログへ出力する
			手順から抜け出す
		もし終わり
		
		マップローテーション最終取得日時=今
		
		【データ】
		例外監視
			データ=「[APIURL]/maprotation」をHTTPで取得したもの
			「モザンビークAPI マップローテーションデータ取得 - ステータスコード: [HTTPのステータスコード]」をデバッグログへ出力する
			もしHTTPのステータスコードが200でないなら
				マップローテーションデータ=エラーマップローテーションデータ
				マップローテーションデータ(「_error」)=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetMapRotation」を取得したもの]&[改行]&[言語管理器で「MozambiqueAPI.ErrorMessage.HTTPStatusCode」を{[HTTPのステータスコード]}として取得したもの]
				手順から抜け出す
			もし終わり
			マップローテーションデータ=データをJSON形式として読み取ったもの
			マップローテーションゲームモード一覧=マップローテーションデータの見出し
			
			// 各ゲームモードのマップのサムネイル画像をダウンロードする
			[メイン設定について「UI_MainMenu」から「MapRotation_Image」を取得したもの]が○なら
				例外監視
					// 既にダウンロードされている画像を削除する
					//「[アプリのコンフィグフォルダー]Resources\MapRotation\Image\*.*」を削除する
					// ダウンロード
					【画像フォルダー:文字列】=「[アプリのコンフィグフォルダー]Resources\MapRotation\Image\」
					【画像URL:文字列】
					【画像パス:文字列】
					【画像一覧:配列】={}
					マップローテーションゲームモード一覧を【ゲームモード】へそれぞれ繰り返す
						画像URL=マップローテーションデータ(ゲームモード)(「current」)(「asset」)
						画像パス=「[画像フォルダー][ゲームモード].jpg」
						
						
						// 既に同じマップの画像ファイルが存在する場合はダウンロードを実行しない
						画像パスが存在しないなら
							// ダウンロードする
							画像URLを画像パスへHTTPでダウンロードする
							「モザンビークAPI マップローテーションサムネイル取得 - ステータスコード: [HTTPのステータスコード]」をデバッグログへ出力する
							
							// HTTPのステータスコードが200以外の場合
							HTTPのステータスコードが200でないなら
								「[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetMapRotationImage」を取得したもの] - [言語管理器で「MozambiqueAPI.ErrorMessage.HTTPStatusCode」を{[HTTPのステータスコード]}として取得したもの]」というエラーを発生させる
								マップローテーションデータ(ゲームモード)(「current」)(「asset」)=無
								
							// ダウンロードされているはずの画像ファイルが存在しない場合
							他で画像パスが存在しないなら
								マップローテーションデータ(ゲームモード)(「current」)(「asset」)=無
								
							そして
							
						そうでなければ
							「モザンビークAPI マップローテーションサムネイル取得 - スキップ」をデバッグログへ出力する
							
						そして
						
						画像パスが存在するなら
							マップローテーションデータ(ゲームモード)(「current」)(「asset」)=画像パス
							画像一覧へ画像パスを追加する
						そして
					そして
					
					// 不要な画像ファイルを削除する
					[画像フォルダー]のファイルの一覧を【対象ファイル】へそれぞれ繰り返す
						[[画像一覧すべてのファイル名だけ]から[対象ファイル]を完全一致で探したもの]の個数が0なら
							[{「png」,「jpg」,「jpeg」,「webp」,「gif」}から[対象ファイルの拡張子だけ]を完全一致で探したもの]の個数が1以上なら
								「[画像フォルダー][対象ファイル]」が存在するなら
									「マップローテーション サムネイル画像削除: [対象ファイル]」をデバッグログへ出力する
									「[画像フォルダー][対象ファイル]」を削除する
								そして
							そして
						そして
					そして
				発生した場合
					エラーのメッセージを「エラー」としてデバッグログへ出力する
					もし画像パスが存在するなら画像パスを削除する
				監視終わり
				
			そうでなければ
				// 設定で無効になっている場合はAPIから取得したデータ内の画像URL(パス)を無にする
				マップローテーションゲームモード一覧を【ゲームモード】へそれぞれ繰り返す
					マップローテーションデータ(ゲームモード)(「current」)(「asset」)=無
				そして
				
			そして
		発生した場合
			「モザンビークAPI マップローテーションデータ取得失敗: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			マップローテーションデータ=エラーマップローテーションデータ
			マップローテーションデータ(「_error」)=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetMapRotation」を取得したもの]&[改行]&「[エラーのメッセージ]」
			手順から抜け出す
		監視終わり
	終わり
	
	+サーバーステータス地域:文字列=「Asia」
	+サーバーステータスデータ:辞書
	+サーバーステータス最終取得日時:日時形式
	自分で〈【遅延:整数】として〉サーバーステータス更新する手順
		もし遅延が無でないなら[遅延]秒待つ
		// 10秒間隔を空けないと取得できないようにする
		【経過時間:日時期間形式】=サーバーステータス最終取得日時と今の日付差
		もし経過時間の合計秒数が10未満なら
			//「間隔が短すぎます。[改行][10-経過時間の合計秒数の整数]秒後にもう一度お試しください。」というエラーを発生させる
			「モザンビークAPI サーバーステータスデータ取得スキップ - 経過時間: [経過時間] 秒」を「警告」としてデバッグログへ出力する
			手順から抜け出す
		もし終わり
		
		サーバーステータス最終取得日時=今
		
		サーバーステータス地域=メイン設定について「UI_MainMenu」から「ServerStatus_Region」を取得したもの
		
		【データ】
		例外監視
			データ=「[APIURL]/servers」をHTTPで取得したもの
			「モザンビークAPI サーバーステータスデータ取得 - ステータスコード: [HTTPのステータスコード]」をデバッグログへ出力する
			もしHTTPのステータスコードが200でないなら
				サーバーステータスデータ=エラーサーバーステータスデータ
				サーバーステータスデータ(「_error」)=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetServerStatus」を取得したもの]&[改行]&[言語管理器で「MozambiqueAPI.ErrorMessage.HTTPStatusCode」を{[HTTPのステータスコード]}として取得したもの]
				手順から抜け出す
			もし終わり
			サーバーステータスデータ=データをJSON形式として読み取ったもの
		発生した場合
			「モザンビークAPI サーバーステータスデータ取得失敗: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			サーバーステータスデータ=エラーサーバーステータスデータ
			サーバーステータスデータ(「_error」)=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetServerStatus」を取得したもの]&[改行]&「[エラーのメッセージ]」
			手順から抜け出す
		監視終わり
	終わり
	
	+ニュースデータ:配列
	+ニュース言語:文字列
	-ニュース最終取得日時:日時形式
	+ニュース最大取得数:整数=5
	自分で〈【遅延:整数】として〉ニュース更新する手順
		もし遅延が無でないなら[遅延]秒待つ
		// 10秒間隔を空けないと取得できないようにする
		【経過時間:日時期間形式】=ニュース最終取得日時と今の日付差
		もし経過時間の合計秒数が10未満なら
			//「間隔が短すぎます。[改行][10-経過時間の合計秒数の整数]秒後にもう一度お試しください。」というエラーを発生させる
			「モザンビークAPI ニュースデータ取得スキップ - 経過時間: [経過時間] 秒」を「警告」としてデバッグログへ出力する
			手順から抜け出す
		もし終わり
		
		ニュース最終取得日時=今
		
		ニュース言語=メイン設定について「UI_MainMenu」から「News_Language」を取得したもの
		
		// ニュースを取得する
		【データ】
		【画像パス:文字列】=「[アプリのコンフィグフォルダー]Resources\News\Image\1.jpg」
		例外監視
			データ=「[APIURL]/news?language=[ニュース言語]」をHTTPで取得したもの
			「モザンビークAPI ニュースデータ取得 - ステータスコード: [HTTPのステータスコード]」をデバッグログへ出力する
			// 取得に失敗した場合は内容にエラーメッセージを入れて取得処理を終わる
			もしHTTPのステータスコードが200でないなら
				ニュースデータ=エラーニュースデータ
				ニュースデータ(1)(「title」)=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetNews」を取得したもの]
				ニュースデータ(1)(「short_desc」)=言語管理器で「MozambiqueAPI.ErrorMessage.HTTPStatusCode」を{[HTTPのステータスコード]}として取得したもの
				もし画像パスが存在するなら画像パスを削除する
				手順から抜け出す
			もし終わり
			ニュースデータ=データをJSON形式として読み取ったもの
			ニュースデータ=ニュースデータの1番目から[ニュース最大取得数]個切り出したもの
		発生した場合
			「モザンビークAPI ニュースデータ取得失敗: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			ニュースデータ=エラーニュースデータ
			ニュースデータ(1)(「title」)=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetNews」を取得したもの]
			ニュースデータ(1)(「short_desc」)=「[言語管理器で「General.General.1」を取得したもの]: [エラーのメッセージ]」
			もし画像パスが存在するなら画像パスを削除する
			手順から抜け出す
		監視終わり
		
		// 画像を取得する
		【カウント:整数】=1
		ニュースデータを【ニュース】へそれぞれ繰り返す
			画像パス=画像パスのフォルダだけ&「[カウント].jpg」
			例外監視
				もし画像パスが存在するなら画像パスを削除する
				[ニュース(「img」)]を画像パスへHTTPでダウンロードする
				もしHTTPのステータスコードが200でないなら「[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetNewsImage」を取得したもの] - [言語管理器で「MozambiqueAPI.ErrorMessage.HTTPStatusCode」を{[HTTPのステータスコード]}として取得したもの]」というエラーを発生させる
			発生した場合
				エラーのメッセージを「エラー」としてデバッグログへ出力する
				もし画像パスが存在するなら画像パスを削除する
			監視終わり
			カウント=カウント+1
			// 最大取得数に達したら繰り返しから抜ける
			もしカウントがニュース最大取得数+1以上なら手順から抜け出す
		繰り返し終わり
	終わり
終わり