メインメニューパネル部品とは
	カスタムウィンドウ部品を継承する
	
	+タイトル:文字列=「」
	
	+読み込み完了:真偽値
	
	-説明ツールチップ:ツールチップ
	
	はじめの手順
		初期化する
		このドッキング方向=「全体」
		
		読み込み中ラベルを隠す
		読み込み中ラベルの位置={0,0}
		読み込み中ラベルの大きさ=自分の実質大きさ
		
		サーバーステータス取得失敗ラベルを隠す
		マップローテーション取得失敗ラベルを隠す
		
		説明ツールチップというツールチップを作る
			その待機時間=0.1
			その表示時間=120000
		
		// 起動中パネルを生成する
		起動中パネルという起動中パネル部品を起動中ベースパネルへ作る
		起動中パネルのドッキング方向=「全体」
		起動中ベースパネルのドッキング方向=「全体」
		起動中ベースパネルを最前面
		起動中ベースパネルを隠す
		
		// 起動中パネル関連部品
		//プレイ起動引数テキストの元実体の「BorderStyle」=「なし」
		
		// ニュース部品の初期化
		もし[メイン設定について「UI_MainMenu」から「News_Enable」を取得したもの]が○なら
			// ニュース説明ラベルの最大高さを1文字分にする
			ニュース説明ラベルの自動調整=○
			ニュース説明ラベルの内容=「A」
			ニュース説明ラベル最大高さ=ニュース説明ラベルの高さ
			
			ニュースピクチャーの画像=「[今の位置]Resources\Images\News\Warn.jpg」
			
			ニュース次ボタンの背景画像=[ウィンドウ管理器:「arrow_forward_ios_FILL1_wght400_GRAD0_opsz48」を[ウィンドウ管理器のテーマアイコン色]でアイコン取得したもの]
			ニュース次ボタンの元実体の「FlatAppearance」の「BorderSize」=0
			ニュース前ボタンの背景画像=[ウィンドウ管理器:「arrow_back_ios_FILL1_wght400_GRAD0_opsz48」を[ウィンドウ管理器のテーマアイコン色]でアイコン取得したもの]
			ニュース前ボタンの元実体の「FlatAppearance」の「BorderSize」=0
			
			ニュースタイトルラベルの内容=「読み込み中」
			ニュース説明ラベルの内容=「」
		もし終わり
		
		// サーバーステータス部品の生成/初期化
		もし[メイン設定について「UI_MainMenu」から「ServerStatus_Enable」を取得したもの]が○なら
			// ApexOauth_Crossplay
			クロスプレイステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
			クロスプレイステータス部品の詳細=「0ms」
			
			// EA_novafusion
			ロビーマッチメイキングステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
			ロビーマッチメイキングステータス部品の詳細=「0ms」
			
			// Origin_login
			Originログインステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
			Originログインステータス部品の詳細=「0ms」
			
			// EA_accounts
			EAアカウントステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
			EAアカウントステータス部品の詳細=「0ms」
			
			// LegendUtil API
			LegendUtilAPIステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
			LegendUtilAPIステータス部品の詳細=「」
			
			// サーバーステータスの地域を表示するラベル
			サーバーステータス地域ラベルというラベルをサーバーステータスパネルへ作る
				その位置と大きさ=｛3,0,41,24｝
				その内容=「」
				そのフォント=「Yu Gothic UI,9.75」
				その文字配置=「左」
				その文字色=「#F1F1F1」
				その自動調整=○
				その元実体の「MinimumSize」={0,LegendUtilAPIステータス部品の高さ}
		もし終わり
		
		// マップローテーション部品の生成/設定
		もし[メイン設定について「UI_MainMenu」から「MapRotation_Enable」を取得したもの]が○ならマップローテーション部品生成する
		
		// 更新情報部品の生成
		更新情報部品というメインメニュー更新情報部品を更新情報ベースパネルへ作る
		
		// 高DPI対応
		プロファイル一覧選択リストパネルの幅=プロファイル一覧選択リストパネルの幅に(メイン画面の設計スケール比率(2)/96)を掛けたもの
		
		メインプロファイル選択リストというメインメニュープロファイル選択リスト部品をプロファイル一覧選択リストパネルへ作る
		メインプロファイル選択リストのドッキング方向=「下」
		メインプロファイル選択リストを最前面
		
		プレイボタンパネルの幅=プレイボタンパネルの幅*(メイン画面の設計スケール比率(2)/96)
		
		ニュース更新ボタンを隠す
		ーー貼り付けた部品に対する操作をここに書きます
	終わり
	初期化する手順
		ーー自動生成された手順です。ここに書き加えたプログラムは消える可能性があります
		この位置と大きさを｛15,15,783,600｝に変える
		この内容を「メインメニューランチャーパネル部品」に変える
		このフォントを「Yu Gothic UI,9」に変える
		この文字色を「#F1F1F1」に変える
		この余白を｛5｝に変える
		起動中ベースパネルというパネルを作る
			その位置と大きさを｛5,235,773,235｝に変える
			その移動順を6に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			その余白を｛10｝に変える
		ニュースベースパネルというパネルを作る
			その位置と大きさを｛5,116,773,379｝に変える
			その移動順を5に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			そのドッキング方向を「全体」に変える
			ニュースパネルというパネルをニュースベースパネルへ作る
				その位置と大きさを｛0,20,773,390｝に変える
				その枠を「線」に変える
				その移動順を2に変える
				その自動調整を○に変える
				そのフォントを「Yu Gothic UI,9」に変える
				その文字色を「#F1F1F1」に変える
				そのドッキング方向を「上」に変える
				その余白を｛5｝に変える
				ニュース前ボタンというボタンをニュースパネルへ作る
					その位置と大きさを｛5,5,50,378｝に変える
					その見た目を「フラット」に変える
					その移動順を10に変える
					そのフォーカス移動可能を×に変える
					そのフォントを「Yu Gothic UI,9」に変える
					その文字色を「#F1F1F1」に変える
					その背景画像配置を「中央」に変える
					そのドッキング方向を「左」に変える
				ニュース次ボタンというボタンをニュースパネルへ作る
					その位置と大きさを｛716,5,50,378｝に変える
					その見た目を「フラット」に変える
					その移動順を9に変える
					そのフォーカス移動可能を×に変える
					そのフォントを「Yu Gothic UI,9」に変える
					その文字色を「#F1F1F1」に変える
					その背景画像配置を「中央」に変える
					そのドッキング方向を「右」に変える
				"ニュース表示時間プログレスバー"というプログレスバーをニュースパネルへ作る
					その位置と大きさを｛5,377,688,3｝に変える
					その移動順を7に変える
					そのフォントを「Yu Gothic UI,9」に変える
				ニュースドットラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛61,355,588,25｝に変える
					その内容を「○●」に変える
					そのフォントを「Yu Gothic UI,11.25」に変える
					その語尾省略を○に変える
					その文字配置を「中央」に変える
					その移動順を6に変える
					その文字色を「#F1F1F1」に変える
					その余白を｛1,0,0,0｝に変える
				ニュース説明ラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛5,318,688,25｝に変える
					その内容を「ラベル1」に変える
					そのフォントを「Yu Gothic UI,9.75」に変える
					その語尾省略を○に変える
					その文字配置を「左下」に変える
					その移動順を2に変える
					その文字色を「#F1F1F1」に変える
					その余白を｛1,0,0,0｝に変える
				ニュースタイトルラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛5,293,688,25｝に変える
					その内容を「ラベル1」に変える
					そのフォントを「Yu Gothic UI,12,太字」に変える
					その語尾省略を○に変える
					その文字配置を「左下」に変える
					その移動順を1に変える
					その文字色を「#F1F1F1」に変える
					その余白を｛0,5,0,0｝に変える
				ニュースピクチャーというピクチャーをニュースパネルへ作る
				ニュースピクチャーを初期化開始する
					その位置と大きさを｛5,40,688,250｝に変える
					その自動調整を「比率維持」に変える
					その移動順を3に変える
					そのフォントを「Yu Gothic UI,9」に変える
					その文字色を「#F1F1F1」に変える
				ニュースピクチャーを初期化終了する
				ニュース見出しラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛5,5,761,0｝に変える
					その内容を「ニュース」に変える
					そのフォントを「Yu Gothic UI,14.25,太字」に変える
					その文字配置を「中央」に変える
					その移動順を5に変える
					その文字色を「#F1F1F1」に変える
					その背景画像配置を「拡大」に変える
					そのドッキング方向を「上」に変える
			ニューススペーサーラベルというラベルをニュースベースパネルへ作る
				その位置と大きさを｛0,0,773,20｝に変える
				そのフォントを「Yu Gothic UI,9.75」に変える
				その語尾省略を○に変える
				その文字配置を「左下」に変える
				その移動順を4に変える
				その文字色を「#F1F1F1」に変える
				そのドッキング方向を「上」に変える
				その余白を｛1,0,0,0｝に変える
		プレイパネルというパネルを作る
			その位置と大きさを｛5,495,773,100｝に変える
			その移動順を3に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			そのドッキング方向を「下」に変える
			その余白を｛0,5,0,0｝に変える
			ニュース更新ボタンというボタンをプレイパネルへ作る
				その位置と大きさを｛432,79,115,28｝に変える
				その内容を「ニュースを更新」に変える
				その移動順を1に変える
				そのフォントを「Yu Gothic UI,9」に変える
				その文字色を「#F1F1F1」に変える
			プロファイル一覧選択リストパネルというパネルをプレイパネルへ作る
				その位置と大きさを｛0,5,270,95｝に変える
				その移動順を5に変える
				そのフォントを「Yu Gothic UI,9」に変える
				その文字色を「#F1F1F1」に変える
				そのドッキング方向を「左」に変える
			プレイボタンパネルというパネルをプレイパネルへ作る
				その位置と大きさを｛543,5,230,95｝に変える
				その移動順を5に変える
				そのフォントを「Yu Gothic UI,9」に変える
				その文字色を「#F1F1F1」に変える
				そのドッキング方向を「右」に変える
				プレイボタンというボタンをプレイボタンパネルへ作る
					その位置と大きさを｛0,0,230,95｝に変える
					その見た目を「フラット」に変える
					その内容を「プレイ」に変える
					その移動順を2に変える
					そのフォントを「Yu Gothic UI,14.25,太字」に変える
					その文字色を「#F1F1F1」に変える
					そのドッキング方向を「全体」に変える
		読み込み中ラベルというラベルを作る
			その位置と大きさを｛567,299,116,67｝に変える
			その内容を「読み込み中」に変える
			そのフォントを「Yu Gothic UI,12,太字」に変える
			その文字配置を「中央」に変える
			その移動順を1に変える
			その文字色を「#F1F1F1」に変える
		更新情報ベースパネルというパネルを作る
			その位置と大きさを｛5,114,773,2｝に変える
			その枠を「線」に変える
			その移動順を5に変える
			その自動調整を○に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			そのドッキング方向を「上」に変える
		マップローテーションベースパネルというパネルを作る
			その位置と大きさを｛5,62,773,52｝に変える
			その枠を「線」に変える
			その移動順を5に変える
			その自動調整を○に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			そのドッキング方向を「上」に変える
			マップローテーション取得失敗ラベルというラベルをマップローテーションベースパネルへ作る
				その位置と大きさを｛3,0,99,50｝に変える
				そのフォントを「Yu Gothic UI,9.75,太字」に変える
				その語尾省略を○に変える
				その文字配置を「中央」に変える
				その移動順を8に変える
				その文字色を「#F1F1F1」に変える
			マップローテーションパネルという自動配置パネルをマップローテーションベースパネルへ作る
				その位置と大きさを｛0,0,771,39｝に変える
				その自動調整方法を「伸縮」に変える
				その移動順を7に変える
				そのフォントを「Yu Gothic UI,9」に変える
				その文字色を「#F1F1F1」に変える
				そのドッキング方向を「上」に変える
		サーバーステータスベースパネルというパネルを作る
			その位置と大きさを｛5,7,773,55｝に変える
			その枠を「線」に変える
			その移動順を5に変える
			その自動調整を○に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			そのドッキング方向を「上」に変える
			サーバーステータス取得失敗ラベルというラベルをサーバーステータスベースパネルへ作る
				その位置と大きさを｛359,3,99,50｝に変える
				そのフォントを「Yu Gothic UI,9.75,太字」に変える
				その語尾省略を○に変える
				その文字配置を「中央」に変える
				その移動順を8に変える
				その文字色を「#F1F1F1」に変える
			サーバーステータスパネルという自動配置パネルをサーバーステータスベースパネルへ作る
				その位置と大きさを｛0,0,771,17｝に変える
				その移動順を6に変える
				そのフォントを「Yu Gothic UI,9」に変える
				その文字色を「#F1F1F1」に変える
				そのドッキング方向を「上」に変える
		お知らせベースパネルというパネルを作る
			その位置と大きさを｛5,5,773,2｝に変える
			その枠を「線」に変える
			その移動順を5に変える
			その自動調整を○に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その文字色を「#F1F1F1」に変える
			そのドッキング方向を「上」に変える
	終わり
	
	読み込み中という属性
		設定する手順
			//読み込み中ラベルの表示=設定値
			//読み込み中ラベルを最前面
		終わり
		取得する手順
			読み込み中ラベルの表示を返す
		終わり
	終わり
	
	言語読み込む手順
		読み込み中ラベルの内容=言語管理器で「General.General.Loading」を取得したもの
		
		// メイン画面のタブ部品
		【タブカウント:整数】=1
		メイン画面のタブ項目一覧を【タブ項目】へそれぞれ繰り返す
			タブ項目のタブラベルの内容=言語管理器で「1.1.[タブカウント]」を取得したもの
			タブカウント=タブカウント+1
		繰り返し終わり
		
		// サーバーステータス部品
		クロスプレイステータス部品のタイトル=言語管理器で「1.2.2」を取得したもの
		ロビーマッチメイキングステータス部品のタイトル=言語管理器で「1.2.3」を取得したもの
		Originログインステータス部品のタイトル=言語管理器で「1.2.4」を取得したもの
		EAアカウントステータス部品のタイトル=言語管理器で「1.2.5」を取得したもの
		LegendUtilAPIステータス部品のタイトル=言語管理器で「1.2.6」を取得したもの
		サーバーステータス取得失敗ラベルの内容=言語管理器で「1.2.7」を取得したもの
		
		ニュース見出しラベルの内容=言語管理器で「1.2.8」を取得したもの
		
		プレイボタンの内容=言語管理器で「1.3.1」を取得したもの
	終わり
	
	自分へプロファイル読み込む手順
		読み込み中=○
		
		例外監視
			メインメニュープロファイル選択リスト一覧画面でプロファイル読み込む
			メインプロファイル選択リストの選択ID=[メイン設定について「UI_MainMenu」から「ProfileDropdownList_SelectedID」を取得したもの]
			「プロファイル一覧選択リストパネル 子部品一覧: [プロファイル一覧選択リストパネルの子部品一覧]」をデバッグログへ出力する
			//プレイパネルの高さ=[プロファイル一覧選択リストパネルの子部品一覧すべての高さの合計]+プロファイル一覧選択リストパネルの余白の上下
		発生した場合
			「[言語管理器で「ErrorMessage.2.2」を{エラーのメッセージ}として取得したもの]」を「警告アイコン」で表示する
			読み込み完了=×
			手順から抜け出す
		監視終わり
		
		読み込み中=×
		読み込み完了=○
	終わり
	
	
	// サーバーステータスとニュースの定期更新を開始する
	自分でAPI情報更新開始する手順
		API情報定期更新開始する
		
		// コンフィグで無効になっている項目は部品を隠す
		マップローテーションベースパネルの表示=[メイン設定について「UI_MainMenu」から「MapRotation_Enable」を取得したもの]
		サーバーステータスベースパネルの表示=[メイン設定について「UI_MainMenu」から「ServerStatus_Enable」を取得したもの]
		ニュースベースパネルの表示=[メイン設定について「UI_MainMenu」から「News_Enable」を取得したもの]
		
		// 最終更新日時を更新する
		更新情報部品の最終更新日時=今を「HH:mm:ss」に整えたもの
		
		// 初回更新を実行
		もしマップローテーションベースパネルの表示が○ならマップローテーション更新する
		もしサーバーステータスベースパネルの表示が○ならサーバーステータス更新する
		もしニュースベースパネルの表示が○ならニュース読み込む
	終わり
	
	// 変数
	-API情報情報更新スレッド:スレッド
	+API情報情報更新実行中:真偽値
	+API情報情報更新終了:真偽値
	+マップローテーション定期更新有効:真偽値
	+サーバーステータス定期更新有効:真偽値
	+ニュース定期更新有効:真偽値
	
	// 各情報の更新間隔 (秒)
	-マップローテーション定期更新間隔:整数=60
	-サーバーステータス定期更新間隔:整数=60
	-ニュース定期更新間隔:整数=600
	
	// 各情報の定期更新手順
	自分でAPI情報定期更新開始する手順
		もしAPI情報情報更新実行中なら手順から抜け出す
		
		マップローテーション定期更新有効=○
		サーバーステータス定期更新有効=○
		ニュース定期更新有効=○
		
		// カウントを初期化
		【マップローテーション定期更新カウント:整数】=0
		【サーバーステータス定期更新カウント:整数】=0
		【ニュース定期更新カウント:整数】=0
		
		// コンフィグで無効になっている項目は更新しないようにする
		【マップローテーション有効】=メイン設定について「UI_MainMenu」から「MapRotation_Enable」を取得したもの
		【サーバーステータス有効】=メイン設定について「UI_MainMenu」から「ServerStatus_Enable」を取得したもの
		【ニュース有効】=メイン設定について「UI_MainMenu」から「News_Enable」を取得したもの
		
		API情報情報更新スレッドというスレッドを作る
		API情報情報更新スレッドのバックグラウンド=○
		API情報情報更新スレッドで『
			API情報情報更新終了=×
			API情報情報更新実行中=◯
			「API情報情報定期更新開始」をデバッグログへ出力する
			「- マップローテーション更新間隔: [マップローテーション定期更新間隔] 秒」をデバッグログへ出力する
			「- サーバーステータス更新間隔: [サーバーステータス定期更新間隔] 秒」をデバッグログへ出力する
			「- ニュース更新間隔: [ニュース定期更新間隔] 秒」をデバッグログへ出力する
			繰り返す
				もしAPI情報情報更新終了なら繰り返しから抜け出す
				
				// カウントを増やす 有効フラグかコンフィグの設定どちらかが×の場合は0にする
				もしマップローテーション定期更新有効かつマップローテーション有効ならマップローテーション定期更新カウントを1だけ増やす
				そうでなければマップローテーション定期更新カウント=0
				
				もしサーバーステータス定期更新有効かつサーバーステータス有効ならサーバーステータス定期更新カウントを1だけ増やす
				そうでなければサーバーステータス定期更新カウント=0
				
				もしニュース定期更新有効かつニュース有効ならニュース定期更新カウントを1だけ増やす
				そうでなければニュース定期更新カウント=0
				
				// カウントが指定の値まで来たら更新を実行する
				もし(マップローテーション定期更新カウントがマップローテーション定期更新間隔)かつ(マップローテーション有効)なら
					更新情報部品の最終更新日時=今を「HH:mm:ss」に整えたもの // 最終更新日時を更新する
					マップローテーション定期更新カウント=0
					マップローテーション更新する
				もし終わり
				
				// マップローテーションの残り時間を更新する
				マップローテーション残り時間更新する
				
				もし(サーバーステータス定期更新カウントがサーバーステータス定期更新間隔)かつ(サーバーステータス有効)なら
					更新情報部品の最終更新日時=今を「HH:mm:ss」に整えたもの // 最終更新日時を更新する
					サーバーステータス定期更新カウント=0
					サーバーステータス更新する
				もし終わり
				
				もし(ニュース定期更新カウントがニュース定期更新間隔)かつ(ニュース有効)なら
					更新情報部品の最終更新日時=今を「HH:mm:ss」に整えたもの // 最終更新日時を更新する
					ニュース定期更新カウント=0
					ニュース読み込む
				もし終わり
				
				1秒待つ
			繰り返し終わり
			API情報情報更新終了=×
			API情報情報更新実行中=×
			「API情報情報定期更新終了」をデバッグログへ出力する
		』を実行する
	終わり
	
	+マップローテーション部品生成済み:真偽値=×
	+マップローテーション部品一覧:辞書
	マップローテーション部品生成する手順
		【部品】
		【現在マップ】
		【次マップ】
		【カウント:整数】=1
		マップローテーション部品一覧=空の辞書
		
		// APIからマップローテーション情報を取得する
		モザンビークAPIでマップローテーション更新する
		
		ウィンドウ管理器:マップローテーションパネルを初期化開始する
		モザンビークAPIのマップローテーションゲームモード一覧を【ゲームモード】へそれぞれ繰り返す
			例外監視
				もしゲームモードが「_error」なら
					「マップローテーション取得エラー」をデバッグログへ出力する
					手順から抜け出す
				もし終わり
				「マップローテーション部品生成: [ゲームモード]」をデバッグログへ出力する
				現在マップ=モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「map」)
				次マップ=モザンビークAPIのマップローテーションデータ(ゲームモード)(「next」)(「map」)
				部品=メインメニューマップローテーション部品をマップローテーションパネルへ作ったもの
				ゲームモードについて分岐
				「ltm」の場合 // Mixtape の場合はゲームモードがローテーションで変わるのでそれに対応したテキストを取得する
					もし言語管理器に「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]_[モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「eventName」)]」が存在するなら
						部品のゲームモード=[言語管理器で「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]_[モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「eventName」)]」を取得したもの]
					そうでなければ
						部品のゲームモード=[モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「eventName」)]
					もし終わり
				その他の場合
					部品のゲームモード=[モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「eventName」)]
				分岐終わり
				部品の現在マップ=現在マップ
				部品の次マップ=次マップ
				マップローテーション部品一覧へ「[ゲームモード]」として部品を設定する
				マップローテーションパネルの高さ=部品の高さ
				// セパレーターを生成する
				もしカウントがモザンビークAPIのマップローテーションデータの個数でないなら
					ラベルをマップローテーションパネルへ作る
						その内容=「」
						その幅=1
						その高さ=部品のゲームモードラベルの高さ
						その枠=「線」
				もし終わり
				カウント=カウント+1
			発生した場合
				エラーのメッセージをデバッグログへ出力する
			監視終わり
		繰り返し終わり
		ウィンドウ管理器:マップローテーションパネルを初期化終了する
	終わり
	
	-マップローテーション更新中:真偽値=×
	-マップローテーション更新スレッド:スレッド
	自分でマップローテーション更新する手順
		もしマップローテーション更新中なら手順から抜け出す
		マップローテーション更新スレッドというスレッドを作る
		マップローテーション更新スレッドのバックグラウンド=○
		マップローテーション更新スレッドで『
		「マップローテーション更新開始」をデバッグログへ出力する
		例外監視
			マップローテーション更新中=○
			【部品】
			【現在マップ】
			【次マップ】
			【現在イベント】
			【次イベント】
			
			// APIからマップローテーション情報を取得する
			モザンビークAPIでマップローテーション更新する
			
			// 情報の取得に失敗した場合はエラーラベルを表示する
			もしゲームモードが「_error」なら
				「マップローテーション取得エラー」をデバッグログへ出力する
				手順から抜け出す
			もし終わり
			
			// 各ゲームモードの部品の内容を更新する
			マップローテーション部品一覧の見出しを【ゲームモード】へそれぞれ繰り返す
				部品=マップローテーション部品一覧(ゲームモード)
				
				現在マップ=モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「map」)
				次マップ=モザンビークAPIのマップローテーションデータ(ゲームモード)(「next」)(「map」)
				
				ゲームモードについて分岐
				「ltm」の場合 // Mixtape の場合はゲームモードがローテーションで変わるのでそれに対応したテキストを取得する
					現在イベント=モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「eventName」)
					// 言語ファイルにないゲームモードだった場合はAPIから返ってきたゲームモードをそのまま使う
					もし言語管理器に「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]_[現在イベント]」が存在するなら
						現在イベント=[言語管理器で「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]_[現在イベント]」を取得したもの]
					そうでなければ
						現在イベント=[モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)(「eventName」)]
					もし終わり
					部品のゲームモード=現在イベント
					
					次イベント=モザンビークAPIのマップローテーションデータ(ゲームモード)(「next」)(「eventName」)
					// 言語ファイルにないゲームモードだった場合はAPIから返ってきたゲームモードをそのまま使う
					もし言語管理器に「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]_[次イベント]」が存在するなら
						次イベント=[言語管理器で「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]_[次イベント]」を取得したもの]
					そうでなければ
						次イベント=[モザンビークAPIのマップローテーションデータ(ゲームモード)(「next」)(「eventName」)]
					もし終わり
					部品の次マップ=次マップ&「 (」&[次イベント]&「)」
				その他の場合
					部品のゲームモード=[言語管理器で「MozambiqueAPI.MapRotation.GameMode_[ゲームモード]」を取得したもの]
					部品の次マップ=次マップ
				分岐終わり
				部品の現在マップ=現在マップ
			繰り返し終わり
			
			マップローテーション取得失敗ラベルを隠す
			マップローテーションベースパネルの表示=○
			マップローテーション更新中=×
			大きさが変わった
			「マップローテーション更新終了」をデバッグログへ出力する
		発生した場合
			「マップローテーション更新失敗: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			マップローテーション取得失敗ラベルの内容=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetMapRotation」を取得したもの]&[改行]&[言語管理器で「General.General.1」を取得したもの]
			マップローテーション取得失敗ラベルを表示する
			マップローテーション取得失敗ラベルを最前面
			マップローテーションパネルの表示=×
			マップローテーションベースパネルの表示=○
			マップローテーション更新中=×
			大きさが変わった
			「マップローテーション更新終了」をデバッグログへ出力する
		監視終わり
		』を実行する
	終わり
	
	// マップローテーションを一定間隔で更新する
	-マップローテーション情報更新スレッド:スレッド
	+マップローテーション情報更新実行中:真偽値
	+マップローテーション情報更新終了:真偽値
	-マップローテーションURL:文字列
	-マップローテーション最大数:整数
	自分でマップローテーション情報定期更新開始する手順
		もしマップローテーション情報更新実行中なら手順から抜け出す
		「マップローテーション情報定期更新開始」をデバッグログへ出力する
		
		マップローテーション情報更新スレッドというスレッドを作る
		マップローテーション情報更新スレッドのバックグラウンド=○
		マップローテーション情報更新スレッドで『
		マップローテーション情報更新実行中=◯
		繰り返す
			もしマップローテーション情報更新終了なら繰り返しから抜け出す
			マップローテーション更新する
			60回繰り返す // 1分待機
				もしマップローテーション情報更新終了なら繰り返しから抜け出す
				1秒待つ
			繰り返し終わり
			1秒待つ
		繰り返し終わり
		マップローテーション情報更新終了=×
		マップローテーション情報更新実行中=×
		「マップローテーション情報定期更新終了」をデバッグログへ出力する
		』を実行する
	終わり
	
	自分でマップローテーション残り時間更新する手順
		【部品】
		【現在情報】
		【次情報】
		【残り時間】
		【現在時刻】=[今のUNIX時間]
		// 各ゲームモードの部品の残り時間を更新する
		マップローテーション部品一覧の見出しを【ゲームモード】へそれぞれ繰り返す
			例外監視
				部品=マップローテーション部品一覧(ゲームモード)
				現在情報=モザンビークAPIのマップローテーションデータ(ゲームモード)(「current」)
				次情報=モザンビークAPIのマップローテーションデータ(ゲームモード)(「next」)
				
				もし[現在情報(「end」)]<[現在時刻]なら
					部品の残り時間=「」
					繰り返しを続ける
				もし終わり
				
				残り時間=日時期間形式を作ったもの
				残り時間へ([現在情報(「end」)]-[現在時刻])秒足す
				部品の残り時間=「[[][残り時間][]]」
			発生した場合
				「マップローテーション残り時間更新エラー」を「エラー」としてデバッグログへ出力する
				「[エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
				部品の残り時間=「」
			監視終わり
		繰り返し終わり
	終わり
	
	【ステータス】をサーバーステータス状態値変換する手順:整数
		もしステータスが「UP」なら
			1を返す
			
		他でもしステータスが「SLOW」なら
			2を返す
			
		他でもしステータスが○なら
			1を返す
			
		そうでなければ
			3を返す
			
		もし終わり
	終わり
	
	-サーバーステータス更新中:真偽値=×
	-サーバーステータス更新スレッド:スレッド
	自分でサーバーステータス更新する手順
		もしサーバーステータス更新中なら手順から抜け出す
		サーバーステータス更新スレッドというスレッドを作る
		サーバーステータス更新スレッドのバックグラウンド=○
		サーバーステータス更新スレッドで『
		「サーバーステータス更新開始」をデバッグログへ出力する
		例外監視
			サーバーステータス更新中=○
			// レイアウトの調整を実行
			大きさが変わった
			// サーバーステータス情報を更新する
			モザンビークAPIでサーバーステータス更新する
			// LegendUtil APIのステータスを更新する
			【LegendUtilAPIステータス:整数】
			【LegendUtilAPIステータスコード:整数】
			【LegendUtilAPIレイテンシー】=アプリのAPIアドレスからPingでレイテンシー取得したもの
			例外監視
				HTTPでアプリのAPIURLを取得する
				LegendUtilAPIステータスコード=HTTPのステータスコード
			発生した場合
				LegendUtilAPIステータスコード=0
			監視終わり
			もしLegendUtilAPIレイテンシーが0以上なら
				もしLegendUtilAPIステータスコードが200でないなら
					LegendUtilAPIステータス=3
					LegendUtilAPIレイテンシー=「SC: [LegendUtilAPIステータスコード]」
					
				そうでなければ
					LegendUtilAPIステータス=1
					LegendUtilAPIレイテンシー=「[LegendUtilAPIレイテンシー]ms」
					
				もし終わり
				
			そうでなければ
				LegendUtilAPIステータス=3
				LegendUtilAPIレイテンシー=「-」
				
			もし終わり
			
			サーバーステータス地域ラベルの内容=言語管理器で「1.2.1」を{[モザンビークAPIのサーバーステータス地域]}として取得したもの
			
			// 取得に失敗した場合
			もしモザンビークAPIのサーバーステータスデータに「_error」が存在するなら
				サーバーステータスパネルの表示=×
				サーバーステータス取得失敗ラベルの内容=モザンビークAPIのサーバーステータスデータ(「_error」)
				サーバーステータス取得失敗ラベルを表示する
				サーバーステータス取得失敗ラベルを最前面
				サーバーステータスベースパネルの表示=○
				「サーバーステータス更新終了」をデバッグログへ出力する
				サーバーステータス更新中=×
				手順から抜け出す
				
			// 取得に成功した場合
			そうでなければ
				サーバーステータス取得失敗ラベルの表示=×
				サーバーステータス取得失敗ラベルの内容=「」
				サーバーステータスパネルの表示=○
				
			もし終わり
			
			//クロスプレイステータス部品のタイトル=モザンビークAPI(「ApexOauth_Crossplay」)(モザンビークAPIのサーバーステータス地域)
			クロスプレイステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「ApexOauth_Crossplay」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			クロスプレイステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「ApexOauth_Crossplay」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			//ロビーマッチメイキングステータス部品のタイトル=モザンビークAPI(「EA_novafusion」)(モザンビークAPIのサーバーステータス地域)
			ロビーマッチメイキングステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「EA_novafusion」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			ロビーマッチメイキングステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「EA_novafusion」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			//Originログインステータス部品のタイトル=モザンビークAPI(「Origin_login」)(モザンビークAPIのサーバーステータス地域)
			Originログインステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「Origin_login」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			Originログインステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「Origin_login」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			//EAアカウントステータス部品のタイトル=モザンビークAPI(「EA_accounts」)(モザンビークAPIのサーバーステータス地域)
			EAアカウントステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「EA_accounts」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			EAアカウントステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「EA_accounts」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			
			LegendUtilAPIステータス部品の詳細=LegendUtilAPIレイテンシー
			LegendUtilAPIステータス部品の状態=LegendUtilAPIステータス
			
			サーバーステータス取得失敗ラベルを隠す
			サーバーステータスベースパネルの表示=○
			サーバーステータス更新中=×
			大きさが変わった
			「サーバーステータス更新終了」をデバッグログへ出力する
		発生した場合
			「サーバーステータス更新失敗: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			サーバーステータス取得失敗ラベルの内容=[言語管理器で「MozambiqueAPI.ErrorMessage.FailedToGetServerStatus」を取得したもの]&[改行]&[言語管理器で「General.General.1」を取得したもの]
			サーバーステータス取得失敗ラベルを表示する
			サーバーステータス取得失敗ラベルを最前面
			サーバーステータスパネルの表示=×
			サーバーステータスベースパネルの表示=○
			サーバーステータス更新中=×
			大きさが変わった
			「サーバーステータス更新終了」をデバッグログへ出力する
		監視終わり
		』を実行する
	終わり
	
	// サーバーステータスを一定間隔で更新する
	-サーバーステータス情報更新スレッド:スレッド
	+サーバーステータス情報更新実行中:真偽値
	+サーバーステータス情報更新終了:真偽値
	-サーバーステータスURL:文字列
	-サーバーステータス最大数:整数
	自分でサーバーステータス情報定期更新開始する手順
		もしサーバーステータス情報更新実行中なら手順から抜け出す
		「サーバーステータス情報定期更新開始」をデバッグログへ出力する
		
		サーバーステータス情報更新スレッドというスレッドを作る
		サーバーステータス情報更新スレッドのバックグラウンド=○
		サーバーステータス情報更新スレッドで『
		サーバーステータス情報更新実行中=◯
		繰り返す
			もしサーバーステータス情報更新終了なら繰り返しから抜け出す
			サーバーステータス更新する
			60回繰り返す // 1分待機
				もしサーバーステータス情報更新終了なら繰り返しから抜け出す
				1秒待つ
			繰り返し終わり
			1秒待つ
		繰り返し終わり
		サーバーステータス情報更新終了=×
		サーバーステータス情報更新実行中=×
		「サーバーステータス情報定期更新終了」をデバッグログへ出力する
		』を実行する
	終わり
	
	-ニュース説明ラベル最大高さ:整数
	ニュース部品サイズ調整する手順
		例外監視
			【パネル部品高さ】=0
			ニュースパネルの子部品一覧を【子部品】へそれぞれ繰り返す
				もし子部品の名前が「ニュースピクチャー」でないかつ子部品の名前が「ニュース次ボタン」でないかつ子部品の名前が「ニュース前ボタン」でないなら
					パネル部品高さ=パネル部品高さ+子部品の高さ
				もし終わり
			繰り返し終わり
			
			【ピクチャー幅:整数】=ニュースベースパネルの実質大きさ(1)-ニュースベースパネルの余白の左右-ニュースパネルの余白の左右-ニュース次ボタンの幅-ニュース前ボタンの幅
			【ピクチャー高さ:整数】=ニュースベースパネルの実質大きさ(2)-ニュースベースパネルの余白の上下-ニュースパネルの余白の上下-パネル部品高さ
			ニュースピクチャーの大きさ=ニュースピクチャーの画像の大きさを{ピクチャー幅,ピクチャー高さ}へサムネイル化したもの
			
			// 各部品の幅を画像に合わせる
			ニュースタイトルラベルの自動調整=○
			ニュースタイトルラベルの元実体の「MinimumSize」={ニュースピクチャーの幅,1}
			
			ニュース説明ラベルの自動調整=○
			ニュース説明ラベルの元実体の「MinimumSize」={ニュースピクチャーの幅,1}
			ニュース説明ラベルの元実体の「MaximumSize」={ニュースピクチャーの幅,ニュース説明ラベル最大高さ}
			
			ニュースドットラベルの幅=ニュースピクチャーの幅
			ニュース表示時間プログレスバーの幅=ニュースピクチャーの幅
			
			ニューススペーサーラベルの高さ=(ニュースベースパネルの実質大きさ(2)-ニュースベースパネルの余白の上下-ニュースパネルの高さ)/2
			【部品横位置】=(ニュースパネルの余白の左+ニュースパネルの実質大きさ(1)-ニュースピクチャーの幅)/2
			ニュースピクチャーの位置={部品横位置,ニュース見出しラベルの高さ+ニュースパネルの余白の上}
			
			ニュースタイトルラベルの位置={部品横位置,ニュース見出しラベルの高さ+ニュースピクチャーの高さ}
			ニュース説明ラベルの位置={部品横位置,ニュースタイトルラベルの縦+ニュースタイトルラベルの高さ}
			ニュースドットラベルの位置={部品横位置,ニュース説明ラベルの縦+ニュース説明ラベルの高さ}
			ニュース表示時間プログレスバーの位置={部品横位置,ニュースドットラベルの縦+ニュースドットラベルの高さ}
			ニュース表示時間プログレスバーの表示=×
		発生した場合
			エラーのメッセージを「エラー」としてデバッグログへ出力する
		監視終わり
	終わり
	
	// ニュースを一定間隔で切り替える (ローテーション)
	-ニュース更新スレッド:スレッド
	+ニュース定期更新実行中:真偽値=×
	+ニュース更新終了:真偽値=×
	-ニュースデータ:配列
	-ニュースURL:文字列
	-ニュース最大数:整数
	-ニュース画像ファイル:画像
	-ニュース表示時間:整数=10 // 秒
	-ニュース次:真偽値
	-ニュース前:真偽値
	ニュース更新開始する手順
		もしニュース定期更新実行中なら手順から抜け出す
		ニュース更新スレッドというスレッドを作る
		ニュース更新スレッドのバックグラウンド=○
		ニュース更新スレッドで『
		ニュース定期更新実行中=◯
		「ニュース定期更新開始」をデバッグログへ出力する
		【ニュースカウント:整数】=1
		【ニュース表示時間カウント:整数】=0
		ニュース画像ファイル=画像(「[今の位置]Resources\Images\News\Warn.jpg」)を作ったもの
		
		ニュース表示時間プログレスバーの最大値=ニュース表示時間*10
		
		// 7秒ごとにニュースを切り替える
		繰り返す
			もしニュース更新終了なら繰り返しから抜け出す
			もしニュースデータの個数がニュースカウント未満ならニュースカウント=1
			// 最大表示数を超えたらカウントをリセット
			もしニュースカウントがニュースデータの個数+1ならニュースカウント=1
			// ドットを初期化
			ニュースドットラベルの内容=[「○」を(ニュースデータの個数)回反復文字]
			// ドットを更新
			ニュースドットラベルの内容=[ニュースドットラベルの内容]のニュースカウント文字目から1文字「●」に取り替えたもの
			例外監視
				ニュースタイトルラベルの内容=ニュースデータ(ニュースカウント)の「title」
				ニュース説明ラベルの内容=ニュースデータ(ニュースカウント)の「short_desc」
				
				もし「[アプリのコンフィグフォルダー]Resources\News\Image\[ニュースカウント].jpg」が存在しないなら
					ニュース画像ファイルの内容=「[今の位置]Resources\Images\News\Warn.jpg」
					
				そうでなければ
					ニュース画像ファイルの内容=「[アプリのコンフィグフォルダー]Resources\News\Image\[ニュースカウント].jpg」
					
				もし終わり
				ニュースピクチャーへニュース画像ファイルを開く
				
				ニュースタイトルラベルのマウスカーソル=「手」
				ニュースピクチャーのマウスカーソル=「手」
				
				ニュースURL=ニュースデータ(ニュースカウント)の「link」
			発生した場合
				「[エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
				ニュースタイトルラベルの内容=言語管理器で「ErrorMessage.1.2」を取得したもの
				ニュース説明ラベルの内容=「[言語管理器で「General.General.1」を取得したもの]: [エラーのメッセージ]」
				
				ニュース画像ファイルの内容=「[今の位置]Resources\Images\News\Warn.jpg」
				ニュースピクチャーへニュース画像ファイルを開く
				
				ニュースタイトルラベルのマウスカーソル=「標準」
				ニュースピクチャーのマウスカーソル=「標準」
				
				ニュースURL=「」
			監視終わり
			ニュース部品サイズ調整する
			// 待機
			ニュース表示時間カウント=0
			ニュース表示時間*10回繰り返す
				もしニュース更新終了なら繰り返しから抜け出す
				ニュース表示時間カウント=ニュース表示時間カウント+1
				もしニュース次なら
					もしニュースカウントがニュースデータの個数ならニュースカウント=1
					そうでなければニュースカウント=ニュースカウント+1
					繰り返しから抜け出す
					
				他でもしニュース前なら
					もしニュースカウントが1ならニュースカウント=ニュースデータの個数
					そうでなければニュースカウント=ニュースカウント-1
					繰り返しから抜け出す
					
				もし終わり
				0.1秒待つ
			繰り返し終わり
			もしニュース更新終了なら繰り返しから抜け出す
			
			// カウントを増やす
			もしニュース次またはニュース前なら
				ニュース次=×
				ニュース前=×
				
			そうでなければ
				ニュースカウント=ニュースカウント+1
				
			もし終わり
			0.1秒待つ
		繰り返し終わり
		ニュース画像ファイルの内容=「[今の位置]Resources\Images\News\Warn.jpg」
		ニュースピクチャーへニュース画像ファイルを開く
		ニュース更新終了=×
		「ニュース定期更新終了」をデバッグログへ出力する
		ニュース定期更新実行中=×
		』を実行する
	終わり
	
	-ニュース更新中:真偽値=×
	-ニュース読み込みスレッド:スレッド
	自分でニュース読み込む手順
		もしニュース更新中なら手順から抜け出す
		ニュース読み込みスレッドというスレッドを作る
		ニュース読み込みスレッドのバックグラウンド=○
		ニュース読み込みスレッドで『
		「ニュース更新開始」をデバッグログへ出力する
		例外監視
			//ニュースベースパネルの表示=×
			ニュース更新終了=○
			ニュース更新中=○
			
			ニュースピクチャーの有効=×
			
			ニュース次ボタンの有効=×
			ニュース前ボタンの有効=×
			
			ニュース更新ボタンの有効=×
			
			繰り返す
				もしニュース更新スレッドが実行中でないかつニュース定期更新実行中でないなら繰り返しから抜け出す
				0.1秒待つ
			繰り返し終わり
			
			// ニュースデータを取得する
			モザンビークAPIでニュース更新する
			【ニュース個数:整数】=モザンビークAPIのニュースデータの個数
			【ニュース最大数:整数】=モザンビークAPIのニュース最大取得数
			
			// ニュースデータを結合
			ニュースデータ=モザンビークAPIのニュースデータのクローン
			ニュース最大数=モザンビークAPIのニュース最大取得数
			「ニュース数: [ニュース個数]/[ニュース最大数]」をデバッグログへ出力する
			
			ニュースピクチャーの有効=○
			
			ニュース次ボタンの有効=○
			ニュース前ボタンの有効=○
			
			ニュース更新ボタンの有効=○
			ニュースベースパネルの表示=○
			ニュース更新中=×
			ニュース更新終了=×
			大きさが変わった
			ニュース更新開始する
			「ニュース更新終了」をデバッグログへ出力する
		発生した場合
			「ニュース更新失敗: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			もしモザンビークAPIのニュースデータが無ならニュースデータ=モザンビークAPIのエラーニュースデータ
			そうでなければニュースデータ=モザンビークAPIのニュースデータのクローン
			ニュース更新ボタンの有効=○
			ニュースベースパネルの表示=○
			ニュース更新中=×
			ニュース更新終了=×
			大きさが変わった
			ニュース更新開始する
		監視終わり
		』を実行する
	終わり
	
	// ニュースを一定間隔で更新する
	-ニュース情報更新スレッド:スレッド
	+ニュース情報更新実行中:真偽値=×
	+ニュース情報更新終了:真偽値
	自分でニュース情報定期更新開始する手順
		もしニュース情報更新実行中なら手順から抜け出す
		「ニュース情報定期更新開始」をデバッグログへ出力する
		
		ニュース情報更新スレッドというスレッドを作る
		ニュース情報更新スレッドのバックグラウンド=○
		ニュース情報更新スレッドで『
		ニュース情報更新実行中=◯
		繰り返す
			もしニュース情報更新終了なら繰り返しから抜け出す
			ニュース読み込む
			600回繰り返す // 10分待機
				もしニュース情報更新終了なら繰り返しから抜け出す
				1秒待つ
			繰り返し終わり
			1秒待つ
		繰り返し終わり
		ニュース更新終了=× // ニュースのローテーションを終了する
		ニュース情報更新終了=×
		ニュース情報更新実行中=×
		「ニュース情報定期更新終了」をデバッグログへ出力する
		』を実行する
	終わり
	
	大きさが変わった時の手順
		例外監視
			読み込み中ラベルの位置={0,0}
			読み込み中ラベルの大きさ={自分の実質大きさの幅,自分の実質大きさの高さ-プレイパネルの高さ}
			
			サーバーステータス取得失敗ラベルの位置={0,0}
			サーバーステータス取得失敗ラベルのドッキング方向=「上」
			サーバーステータス取得失敗ラベルの高さ=60に(メイン画面の設計スケール比率(2)/96)を掛けたもの
			// パネルの高さを自動調整する
			サーバーステータスパネルの高さ=(サーバーステータスパネルの子部品一覧すべての縦の最大値)+サーバーステータスパネルの子部品一覧(1)の高さ+サーバーステータスパネルの子部品一覧(1)の間隔(2)+サーバーステータスパネルの子部品一覧(1)の間隔(4)
			// サーバーステータスの地域表示ラベルの高さを他の項目に合わせる
			サーバーステータス地域ラベルの元実体の「MinimumSize」={0,LegendUtilAPIステータス部品の高さ+LegendUtilAPIステータス部品のメインパネルの余白の上下}
			
			マップローテーション取得失敗ラベルの位置={0,0}
			マップローテーション取得失敗ラベルのドッキング方向=「上」
			マップローテーション取得失敗ラベルの高さ=60に(メイン画面の設計スケール比率(2)/96)を掛けたもの
		発生した場合
			「[エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
		監視終わり
		ニュース部品サイズ調整する
	終わり
	
	ニュースピクチャーのマウスのボタンが押された時の手順
		もしこの時のボタンが「左ボタン」なら
			もしニュースURLが無でないならニュースURLを開く
		もし終わり
	終わり
	
	ニュースタイトルラベルのマウスのボタンが押された時の手順
		もしこの時のボタンが「左ボタン」なら
			もしニュースURLが無でないならニュースURLを開く
		もし終わり
	終わり
	
	ニュース前ボタンがクリックされた時の手順
		ニュース前=○
		ニュース前ボタンの親を選択する
	終わり
	
	ニュース次ボタンがクリックされた時の手順
		ニュース次=○
		ニュース次ボタンの親を選択する
	終わり
	
	+プレイボタン状態:整数=1
	プレイボタンがクリックされた時の手順
		プレイボタンの親を選択する
		プレイボタン状態について分岐
		1の場合
			ApexLegendsを[メインプロファイル選択リストの選択ID]で起動する
		2の場合
			もし言語管理器で「1.3.4」を取得したものを「警告アイコン」にして「はいといいえ」で質問したものが「はい」なら
				ApexLegendsの監視強制終了=○
			もし終わり
		分岐終わり
	終わり
	
	ニュース更新ボタンがクリックされた時の手順
		ニュース読み込む
	終わり
終わり

メインメニュータブ部品とは
	カスタムウィンドウ部品を継承する
	
	+切り替え部品
	+切り替え文:匿名手順
	
	はじめ(名前)の手順
		初期化する
		このドッキング方向=「左」
		この自動調整=◯
		タブラベルの内容=名前
		ーー貼り付けた部品に対する操作をここに書きます
	終わり
	初期化する手順
		ーー自動生成された手順です。ここにプログラムを書き加えても消える場合があります
		この位置と大きさを｛15,15,150,150｝に変える
		この内容を「メインメニュータブ部品」に変える
		この文字色を「標準の文字」に変える
		タブスペーサーラベルというラベルを作る
			その位置と大きさを｛52,0,5,150｝に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その移動順を2に変える
			その文字色を「標準の文字」に変える
			そのドッキング方向を「左」に変える
		タブラベルというラベルを作る
			その位置と大きさを｛0,0,52,25｝に変える
			その内容を「プレイ」に変える
			そのフォントを「Yu Gothic UI,14.25」に変える
			その語尾省略を○に変える
			その自動調整を○に変える
			その文字配置を「中央」に変える
			その移動順を1に変える
			そのフォーカス移動可能を○に変える
			そのマウスカーソルを「手」に変える
			その文字色を「標準の文字」に変える
			そのドッキング方向を「左」に変える
	終わり
	
	自分を選択する手順
		メイン画面:タブ選択解除する
		【タブフォント】=タブラベルのフォント
		タブフォントの装飾=「太字+下線」
		タブラベルのフォント=タブフォント
	終わり
	
	自分でクリック実行する手順
		「メインメニュー タブクリック: [タブラベルの内容]」をデバッグログへ出力する
		自分を選択する
		例外監視
			切り替え文を実行する
		発生した場合
			エラーのメッセージをデバッグログへ出力する
			エラーのメッセージを「中止アイコン」で表示する
			メイン画面のタブ項目一覧(1)を選択する // メインメニューのタブを選択状態にする
			メイン画面をメイン画面のメインメニューパネルへ切り替える // メインメニューへ切り替える
			手順から抜け出す
		監視終わり
		メイン画面を切り替え部品へ切り替える
	終わり
	
	タブラベルのマウスのボタンが押された時の手順
		もしこの時のボタンが「左ボタン」でないなら手順から抜け出す
		クリック実行する
	終わり
終わり