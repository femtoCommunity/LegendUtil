メインメニューパネル部品とは
	カスタムウィンドウ部品を継承する
	
	+タイトル:文字列=「」
	
	+読み込み完了:真偽値
	
	-説明ツールチップ:ツールチップ
	
	はじめの手順
		初期化する
		このドッキング方向=「全体」
		
		読み込み中ラベルを隠す
		読み込み中ラベルの位置={0,0}
		読み込み中ラベルの大きさ=自分の実質大きさ
		
		サーバーステータス取得失敗ラベルを隠す
		
		説明ツールチップというツールチップを作る
			その待機時間=0.1
			その表示時間=120000
		
		// ニュース説明ラベルの最大高さを1文字分にする
		ニュース説明ラベルの自動調整=○
		ニュース説明ラベルの内容=「A」
		ニュース説明ラベル最大高さ=ニュース説明ラベルの高さ
		
		ニュースピクチャーの画像=「[今の位置]Resources\Images\News\Warn.jpg」
		
		ニュース次ボタンの背景画像=[ウィンドウ管理器:「arrow_forward_ios_FILL1_wght400_GRAD0_opsz48」を[ウィンドウ管理器のテーマアイコン色]でアイコン取得したもの]
		ニュース次ボタンの元実体の「FlatAppearance」の「BorderSize」=0
		ニュース前ボタンの背景画像=[ウィンドウ管理器:「arrow_back_ios_FILL1_wght400_GRAD0_opsz48」を[ウィンドウ管理器のテーマアイコン色]でアイコン取得したもの]
		ニュース前ボタンの元実体の「FlatAppearance」の「BorderSize」=0
		
		// ApexOauth_Crossplay
		クロスプレイステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
		クロスプレイステータス部品の詳細=「0ms」
		
		// EA_novafusion
		ロビーマッチメイキングステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
		ロビーマッチメイキングステータス部品の詳細=「0ms」
		
		// Origin_login
		Originログインステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
		Originログインステータス部品の詳細=「0ms」
		
		// EA_accounts
		EAアカウントステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
		EAアカウントステータス部品の詳細=「0ms」
		
		// LegendUtil API
		LegendUtilAPIステータス部品というメインメニューサーバーステータス部品をサーバーステータスパネルへ作る
		LegendUtilAPIステータス部品の詳細=「」
		
		ニュースベースパネルの表示=×
		サーバーステータスベースパネルの表示=×
		ーー貼り付けた部品に対する操作をここに書きます
	終わり
	初期化する手順
		ーー自動生成された手順です。ここにプログラムを書き加えても消える場合があります
		この位置と大きさを｛15,15,710,600｝に変える
		この内容を「メインメニューランチャーパネル部品」に変える
		このフォントを「Yu Gothic UI,9」に変える
		この余白を｛5｝に変える
		ニュースベースパネルというパネルを作る
			その位置と大きさを｛5,55,700,440｝に変える
			その移動順を5に変える
			そのフォントを「Yu Gothic UI,9」に変える
			そのドッキング方向を「全体」に変える
			ニュースパネルというパネルをニュースベースパネルへ作る
				その位置と大きさを｛0,25,700,390｝に変える
				その枠を「線」に変える
				その移動順を2に変える
				その自動調整を○に変える
				そのフォントを「Yu Gothic UI,9」に変える
				そのドッキング方向を「上」に変える
				その余白を｛5｝に変える
				ニュース前ボタンというボタンをニュースパネルへ作る
					その位置と大きさを｛5,40,50,343｝に変える
					その見た目を「フラット」に変える
					その移動順を10に変える
					そのフォーカス移動可能を×に変える
					そのフォントを「Yu Gothic UI,9」に変える
					その背景画像配置を「中央」に変える
					そのドッキング方向を「左」に変える
				ニュース次ボタンというボタンをニュースパネルへ作る
					その位置と大きさを｛643,40,50,343｝に変える
					その見た目を「フラット」に変える
					その移動順を9に変える
					そのフォーカス移動可能を×に変える
					そのフォントを「Yu Gothic UI,9」に変える
					その背景画像配置を「中央」に変える
					そのドッキング方向を「右」に変える
				"ニュース表示時間プログレスバー"というプログレスバーをニュースパネルへ作る
					その位置と大きさを｛5,377,688,3｝に変える
					その移動順を7に変える
					そのフォントを「Yu Gothic UI,9」に変える
				ニュースドットラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛61,355,588,25｝に変える
					その内容を「○●」に変える
					そのフォントを「Yu Gothic UI,11.25」に変える
					その語尾省略を○に変える
					その文字配置を「中央」に変える
					その移動順を6に変える
					その余白を｛1,0,0,0｝に変える
				ニュース説明ラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛5,318,688,25｝に変える
					その内容を「ラベル1」に変える
					そのフォントを「Yu Gothic UI,9.75」に変える
					その語尾省略を○に変える
					その文字配置を「左下」に変える
					その移動順を2に変える
					その余白を｛1,0,0,0｝に変える
				ニュースタイトルラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛5,293,688,25｝に変える
					その内容を「ラベル1」に変える
					そのフォントを「Yu Gothic UI,12,太字」に変える
					その語尾省略を○に変える
					その文字配置を「左下」に変える
					その移動順を1に変える
					その余白を｛0,5,0,0｝に変える
				ニュースピクチャーというピクチャーをニュースパネルへ作る
				ニュースピクチャーを初期化開始する
					その位置と大きさを｛5,40,688,250｝に変える
					その自動調整を「比率維持」に変える
					その移動順を3に変える
					そのフォントを「Yu Gothic UI,9」に変える
				ニュースピクチャーを初期化終了する
				ニュース見出しラベルというラベルをニュースパネルへ作る
					その位置と大きさを｛5,5,688,35｝に変える
					その内容を「ニュース」に変える
					そのフォントを「Yu Gothic UI,14.25,太字」に変える
					その文字配置を「中央」に変える
					その移動順を5に変える
					その背景画像配置を「拡大」に変える
					そのドッキング方向を「上」に変える
			ニューススペーサーラベルというラベルをニュースベースパネルへ作る
				その位置と大きさを｛0,0,700,25｝に変える
				そのフォントを「Yu Gothic UI,9.75」に変える
				その語尾省略を○に変える
				その文字配置を「左下」に変える
				その移動順を4に変える
				そのドッキング方向を「上」に変える
				その余白を｛1,0,0,0｝に変える
		プレイパネルというパネルを作る
			その位置と大きさを｛5,495,700,100｝に変える
			その移動順を3に変える
			そのフォントを「Yu Gothic UI,9」に変える
			そのドッキング方向を「下」に変える
			その余白を｛0,5,0,0｝に変える
			プロファイル一覧選択リストパネルというパネルをプレイパネルへ作る
				その位置と大きさを｛0,5,270,95｝に変える
				その移動順を3に変える
				そのフォントを「Yu Gothic UI,9」に変える
				そのドッキング方向を「左」に変える
				プロファイル一覧選択リスト切り替えボタンというボタンをプロファイル一覧選択リストパネルへ作る
					その位置と大きさを｛0,0,270,30｝に変える
					その内容を「開く」に変える
					そのフォントを「Yu Gothic UI,9」に変える
					そのドッキング方向を「上」に変える
				プロファイル選択リストという選択リストをプロファイル一覧選択リストパネルへ作る
					その位置と大きさを｛3,36,264,28｝に変える
					その選択窓幅を225に変える
					その項目高さを20に変える
					その移動順を2に変える
					そのフォントを「Yu Gothic UI,11.25,太字」に変える
			プレイボタンというボタンをプレイパネルへ作る
				その位置と大きさを｛470,5,230,95｝に変える
				その見た目を「フラット」に変える
				その内容を「プレイ」に変える
				その移動順を1に変える
				そのフォントを「Yu Gothic UI,14.25,太字」に変える
				そのドッキング方向を「右」に変える
		サーバーステータスベースパネルというパネルを作る
			その位置と大きさを｛5,5,700,50｝に変える
			その移動順を5に変える
			その自動調整を○に変える
			そのフォントを「Yu Gothic UI,9」に変える
			そのドッキング方向を「上」に変える
			サーバーステータスパネルという自動配置パネルをサーバーステータスベースパネルへ作る
				その位置と大きさを｛0,20,700,30｝に変える
				その移動順を6に変える
				そのフォントを「Yu Gothic UI,9」に変える
				そのドッキング方向を「上」に変える
			サーバーステータス取得失敗ラベルというラベルをサーバーステータスベースパネルへ作る
				その位置と大きさを｛579,0,99,50｝に変える
				その内容を「サーバーステータスの取得に失敗しました」に変える
				そのフォントを「Yu Gothic UI,11.25,太字」に変える
				その語尾省略を○に変える
				その文字配置を「中央」に変える
				その移動順を8に変える
			サーバーステータス地域ラベルというラベルをサーバーステータスベースパネルへ作る
				その位置と大きさを｛0,0,46,20｝に変える
				その内容を「地域: 」に変える
				そのフォントを「Yu Gothic UI,11.25」に変える
				その自動調整を○に変える
				その文字配置を「左」に変える
				その移動順を7に変える
				そのドッキング方向を「上」に変える
		読み込み中ラベルというラベルを作る
			その位置と大きさを｛567,299,116,67｝に変える
			その内容を「読み込み中」に変える
			そのフォントを「Yu Gothic UI,12,太字」に変える
			その文字配置を「中央」に変える
			その移動順を1に変える
	終わり
	
	読み込み中という属性
		設定する手順
			読み込み中ラベルの表示=設定値
			読み込み中ラベルを最前面
		終わり
		取得する手順
			読み込み中ラベルの表示を返す
		終わり
	終わり
	
	言語読み込む手順
		【タブカウント:整数】=1
		メイン画面のタブ項目一覧を【タブ項目】へそれぞれ繰り返す
			タブ項目のタブラベルの内容=言語管理器で「1.1.[タブカウント]」を取得したもの
			タブカウント=タブカウント+1
		繰り返し終わり
		クロスプレイステータス部品のタイトル=言語管理器で「1.2.2」を取得したもの
		ロビーマッチメイキングステータス部品のタイトル=言語管理器で「1.2.3」を取得したもの
		Originログインステータス部品のタイトル=言語管理器で「1.2.4」を取得したもの
		EAアカウントステータス部品のタイトル=言語管理器で「1.2.5」を取得したもの
		LegendUtilAPIステータス部品のタイトル=言語管理器で「1.2.6」を取得したもの
		
		ニュース見出しラベルの内容=言語管理器で「1.2.8」を取得したもの
		
		プレイボタンの内容=言語管理器で「1.3.1」を取得したもの
	終わり
	
	+選択中プロファイルID:文字列
	-プロファイルID一覧:配列
	-プロファイル項目一覧:配列
	自分へプロファイル読み込む手順
		【読み込み失敗プロファイル一覧】=空の配列
		
		読み込み中=○
		
		プロファイルID一覧=空の配列
		プロファイル項目一覧=空の配列
		
		プロファイル管理器のプロファイルテーブルの見出しを【ID】へそれぞれ繰り返す
			例外監視
				プロファイルID一覧へIDを追加する
				プロファイル項目一覧へ「[プロファイル管理器のプロファイルテーブル(ID)の名前] | [プロファイル管理器のプロファイルテーブル(ID)のApexLegendsプラットフォーム]」を追加する
			発生した場合
				「メインパネル プロファイル読み込み失敗: [プロファイル管理器のプロファイルテーブル(ID)の名前] ([ID])[改行][エラーのメッセージ]」をデバッグログへ出力する
				読み込み失敗プロファイル一覧へ「[プロファイル管理器のプロファイルテーブル(ID)の名前] ([ID])」を追加する
			監視終わり
		繰り返し終わり
		
		もし読み込み失敗プロファイル一覧の個数が1以上なら
			「[言語管理器で「1.3.1」を{[読み込み失敗プロファイル一覧を「[改行]・」で繋げたもの]}として取得したもの]」を「警告アイコン」で表示する
		もし終わり
		
		プロファイル選択リストをクリアする
		プロファイル選択リストへプロファイル項目一覧を一括追加する
		
		読み込み中=×
		読み込み完了=○
	終わり
	
	【ステータス】をサーバーステータス状態値変換する手順:整数
		もしステータスが「UP」なら
			1を返す
			
		他でもしステータスが「SLOW」なら
			2を返す
			
		他でもしステータスが○なら
			1を返す
			
		そうでなければ
			3を返す
			
		もし終わり
	終わり
	
	-サーバーステータス更新中:真偽値
	自分でサーバーステータス更新する手順
		もしサーバーステータス更新中なら手順から抜け出す
		「サーバーステータス更新開始」をデバッグログへ出力する
		例外監視
			サーバーステータス更新中=○
			サーバーステータスベースパネルの表示=×
			// サーバーステータス情報を更新する
			モザンビークAPIでサーバーステータス更新する
			// LegendUtil APIのステータスを更新する
			【LegendUtilAPIステータス:整数】
			【LegendUtilAPIステータスコード:整数】
			【LegendUtilAPIレイテンシー】=アプリのAPIアドレスからPingでレイテンシー取得したもの
			例外監視
				HTTPでアプリのAPIURLを取得する
				LegendUtilAPIステータスコード=HTTPのステータスコード
			発生した場合
				LegendUtilAPIステータスコード=0
			監視終わり
			もしLegendUtilAPIレイテンシーが0以上なら
				もしLegendUtilAPIステータスコードが200でないなら
					LegendUtilAPIステータス=3
					LegendUtilAPIレイテンシー=「SC: [LegendUtilAPIステータスコード]」
					
				そうでなければ
					LegendUtilAPIステータス=1
					LegendUtilAPIレイテンシー=「[LegendUtilAPIレイテンシー]ms」
					
				もし終わり
				
			そうでなければ
				LegendUtilAPIステータス=3
				LegendUtilAPIレイテンシー=「-」
				
			もし終わり
			
			サーバーステータス地域ラベルの内容=言語管理器で「1.2.1」を{[モザンビークAPIのサーバーステータス地域],[モザンビークAPIのサーバーステータス最終取得日時]}として取得したもの
			
			// 取得に失敗している場合
			もしモザンビークAPIのサーバーステータスデータに「_error」が存在するなら
				サーバーステータス取得失敗ラベルの内容=言語管理器で「ErrorMessage.1.1」を{[モザンビークAPIのサーバーステータスデータ(「_error」)]}として取得したもの
				サーバーステータス取得失敗ラベルを表示する
				サーバーステータス取得失敗ラベルを最前面
				サーバーステータスベースパネルの表示=○
				「サーバーステータス更新終了」をデバッグログへ出力する
				サーバーステータス更新中=×
				手順から抜け出す
				
			そうでなければ
				サーバーステータス取得失敗ラベルの内容=言語管理器で「ErrorMessage.1.1」を{[モザンビークAPIのサーバーステータスデータ(「_error」)]}として取得したもの
				サーバーステータス取得失敗ラベルの表示=×
				
			もし終わり
			
			//クロスプレイステータス部品のタイトル=モザンビークAPI(「ApexOauth_Crossplay」)(モザンビークAPIのサーバーステータス地域)
			クロスプレイステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「ApexOauth_Crossplay」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			クロスプレイステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「ApexOauth_Crossplay」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			//ロビーマッチメイキングステータス部品のタイトル=モザンビークAPI(「EA_novafusion」)(モザンビークAPIのサーバーステータス地域)
			ロビーマッチメイキングステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「EA_novafusion」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			ロビーマッチメイキングステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「EA_novafusion」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			//Originログインステータス部品のタイトル=モザンビークAPI(「Origin_login」)(モザンビークAPIのサーバーステータス地域)
			Originログインステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「Origin_login」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			Originログインステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「Origin_login」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			//EAアカウントステータス部品のタイトル=モザンビークAPI(「EA_accounts」)(モザンビークAPIのサーバーステータス地域)
			EAアカウントステータス部品の詳細=「[モザンビークAPIのサーバーステータスデータ(「EA_accounts」)(モザンビークAPIのサーバーステータス地域)(「ResponseTime」)]ms」
			EAアカウントステータス部品の状態=[モザンビークAPIのサーバーステータスデータ(「EA_accounts」)(モザンビークAPIのサーバーステータス地域)](「Status」)をサーバーステータス状態値変換したもの
			
			LegendUtilAPIステータス部品の詳細=LegendUtilAPIレイテンシー
			LegendUtilAPIステータス部品の状態=LegendUtilAPIステータス
			
			サーバーステータスベースパネルの表示=○
			「サーバーステータス更新終了」をデバッグログへ出力する
			サーバーステータス更新中=×
		発生した場合
			「サーバーステータス更新失敗: [エラーのメッセージ]」をデバッグログへ出力する
			サーバーステータスベースパネルの表示=○
			「サーバーステータス更新終了」をデバッグログへ出力する
			サーバーステータス更新中=×
		監視終わり
	終わり
	
	// サーバーステータスとニュースを一定間隔で更新する
	-API情報更新スレッド:スレッド
	+API情報更新実行中:真偽値
	+API情報更新終了:真偽値
	-サーバーステータスURL:文字列
	-サーバーステータス最大数:整数
	自分でAPI情報更新開始する手順
		もしAPI情報更新実行中なら手順から抜け出す
		
		API情報更新スレッドというスレッドを作る
		API情報更新スレッドで『
		API情報更新実行中=◯
		繰り返す
			もしAPI情報更新終了なら繰り返しから抜け出す
			//プレイパネルの有効=×
			読み込み中=○
			ニュース読み込む
			サーバーステータス更新する
			大きさが変わった
			//プレイパネルの有効=○
			読み込み中=×
			600回繰り返す
				もしAPI情報更新終了なら繰り返しから抜け出す
				0.1秒待つ
			繰り返し終わり
		繰り返し終わり
		API情報更新終了=×
		API情報更新実行中=×
		』を実行する
	終わり
	
	-ニュース説明ラベル最大高さ:整数
	ニュース部品サイズ調整する手順
		例外監視
			【パネル部品高さ】=0
			ニュースパネルの子部品一覧を【子部品】へそれぞれ繰り返す
				もし子部品の名前が「ニュースピクチャー」でないかつ子部品の名前が「ニュース次ボタン」でないかつ子部品の名前が「ニュース前ボタン」でないなら
					パネル部品高さ=パネル部品高さ+子部品の高さ
				もし終わり
			繰り返し終わり
			
			【ピクチャー幅:整数】=ニュースベースパネルの実質大きさ(1)-ニュースベースパネルの余白の左右-ニュースパネルの余白の左右-ニュース次ボタンの幅-ニュース前ボタンの幅
			【ピクチャー高さ:整数】=ニュースベースパネルの実質大きさ(2)-ニュースベースパネルの余白の上下-ニュースパネルの余白の上下-パネル部品高さ
			ニュースピクチャーの大きさ=ニュースピクチャーの画像の大きさを{ピクチャー幅,ピクチャー高さ}へサムネイル化したもの
			
			// 各部品の幅を画像に合わせる
			ニュースタイトルラベルの自動調整=○
			ニュースタイトルラベルの元実体の「MinimumSize」={ニュースピクチャーの幅,1}
			
			ニュース説明ラベルの自動調整=○
			ニュース説明ラベルの元実体の「MinimumSize」={ニュースピクチャーの幅,1}
			ニュース説明ラベルの元実体の「MaximumSize」={ニュースピクチャーの幅,ニュース説明ラベル最大高さ}
			
			ニュースドットラベルの幅=ニュースピクチャーの幅
			ニュース表示時間プログレスバーの幅=ニュースピクチャーの幅
			
			ニューススペーサーラベルの高さ=(ニュースベースパネルの実質大きさ(2)-ニュースベースパネルの余白の上下-ニュースパネルの高さ)/2
			【部品横位置】=(ニュースパネルの余白の左+ニュースパネルの実質大きさ(1)-ニュースピクチャーの幅)/2
			ニュースピクチャーの位置={部品横位置,ニュース見出しラベルの高さ+ニュースパネルの余白の上}
			
			ニュースタイトルラベルの位置={部品横位置,ニュース見出しラベルの高さ+ニュースピクチャーの高さ}
			ニュース説明ラベルの位置={部品横位置,ニュースタイトルラベルの縦+ニュースタイトルラベルの高さ}
			ニュースドットラベルの位置={部品横位置,ニュース説明ラベルの縦+ニュース説明ラベルの高さ}
			ニュース表示時間プログレスバーの位置={部品横位置,ニュースドットラベルの縦+ニュースドットラベルの高さ}
		発生した場合
			エラーのメッセージをデバッグログへ出力する
		監視終わり
	終わり
	
	// ニュースを一定間隔で切り替える
	-ニュース更新スレッド:スレッド
	+ニュース定期更新実行中:真偽値
	+ニュース更新終了:真偽値
	-ニュースデータ:配列
	-ニュースURL:文字列
	-ニュース最大数:整数
	-ニュース画像ファイル:画像
	-ニュース表示時間:整数=10 // 秒
	-ニュース次:真偽値
	-ニュース前:真偽値
	ニュース更新開始する手順
		もしニュース定期更新実行中なら手順から抜け出す
		ニュース更新スレッドというスレッドを作る
		ニュース更新スレッドで『
		ニュース定期更新実行中=◯
		「ニュース定期更新開始」をデバッグログへ出力する
		【ニュースカウント:整数】=1
		【ニュース表示時間カウント:整数】=0
		ニュース画像ファイル=画像(「[今の位置]Resources\Images\News\Warn.jpg」)を作ったもの
		
		ニュース表示時間プログレスバーの最大値=ニュース表示時間*10
		
		// 7秒ごとにニュースを切り替える
		繰り返す
			もしニュース更新終了なら繰り返しから抜け出す
			もしニュースデータの個数がニュースカウント未満ならニュースカウント=1
			// 最大表示数を超えたらカウントをリセット
			もしニュースカウントがニュースデータの個数+1ならニュースカウント=1
			// ドットを初期化
			ニュースドットラベルの内容=[「○」を(ニュースデータの個数)回反復文字]
			// ドットを更新
			ニュースドットラベルの内容=[ニュースドットラベルの内容]のニュースカウント文字目から1文字「●」に取り替えたもの
			例外監視
				ニュースタイトルラベルの内容=ニュースデータ(ニュースカウント)の「title」
				ニュース説明ラベルの内容=ニュースデータ(ニュースカウント)の「short_desc」
				
				もし「[アプリのコンフィグフォルダー]Resources\News\Image\[ニュースカウント].jpg」が存在しないなら
					ニュース画像ファイルの内容=「[今の位置]Resources\Images\News\Warn.jpg」
					
				そうでなければ
					ニュース画像ファイルの内容=「[アプリのコンフィグフォルダー]Resources\News\Image\[ニュースカウント].jpg」
					
				もし終わり
				ニュースピクチャーへニュース画像ファイルを開く
				
				ニュースタイトルラベルのマウスカーソル=「手」
				ニュースピクチャーのマウスカーソル=「手」
				
				ニュースURL=ニュースデータ(ニュースカウント)の「link」
			発生した場合
				「[エラーのメッセージ]」をデバッグログへ出力する
				ニュースタイトルラベルの内容=言語管理器で「ErrorMessage.1.2」を取得したもの
				ニュース説明ラベルの内容=「[言語管理器で「General.General.1」を取得したもの]: [エラーのメッセージ]」
				
				ニュース画像ファイルの内容=「[今の位置]Resources\Images\News\Warn.jpg」
				ニュースピクチャーへニュース画像ファイルを開く
				
				ニュースタイトルラベルのマウスカーソル=「標準」
				ニュースピクチャーのマウスカーソル=「標準」
				
				ニュースURL=「」
			監視終わり
			ニュース部品サイズ調整する
			// 待機
			ニュース表示時間カウント=0
			ニュース表示時間プログレスバーの値=0
			ニュース表示時間*10回繰り返す
				もしニュース更新終了なら繰り返しから抜け出す
				ニュース表示時間カウント=ニュース表示時間カウント+1
				ニュース表示時間プログレスバーの値=ニュース表示時間カウント
				もしニュース次なら
					もしニュースカウントがニュースデータの個数ならニュースカウント=1
					そうでなければニュースカウント=ニュースカウント+1
					繰り返しから抜け出す
					
				他でもしニュース前なら
					もしニュースカウントが1ならニュースカウント=ニュースデータの個数
					そうでなければニュースカウント=ニュースカウント-1
					繰り返しから抜け出す
					
				もし終わり
				0.1秒待つ
			繰り返し終わり
			もしニュース更新終了なら繰り返しから抜け出す
			
			// カウントを増やす
			もしニュース次またはニュース前なら
				ニュース次=×
				ニュース前=×
				
			そうでなければ
				ニュースカウント=ニュースカウント+1
				
			もし終わり
		繰り返し終わり
		ニュース画像ファイルの内容=「[今の位置]Resources\Images\News\Warn.jpg」
		ニュースピクチャーへニュース画像ファイルを開く
		ニュース更新終了=×
		「ニュース定期更新終了」をデバッグログへ出力する
		ニュース定期更新実行中=×
		』を実行する
	終わり
	
	-ニュース更新中:真偽値
	自分でニュース読み込む手順
		もしニュース更新中なら手順から抜け出す
		例外監視
			ニュースベースパネルの表示=×
			ニュース更新終了=○
			ニュース更新中=○
			
			繰り返す
				もしニュース更新スレッドが実行中でないなら繰り返しから抜け出す
				0.1秒待つ
			繰り返し終わり
			
			// ニュースデータを取得する
			モザンビークAPIでニュース更新する
			【ニュース個数:整数】=モザンビークAPIのニュースデータの個数
			【ニュース最大数:整数】=モザンビークAPIのニュース最大取得数
			
			// ニュースデータを結合
			ニュースデータ=モザンビークAPIのニュースデータのクローン
			ニュース最大数=モザンビークAPIのニュース最大取得数
			「ニュース数: [ニュース個数]/[ニュース最大数]」をデバッグログへ出力する
			
			ニュースベースパネルの表示=○
			ニュース更新中=×
			ニュース更新終了=×
		発生した場合
			「ニュース更新失敗: [エラーのメッセージ]」をデバッグログへ出力する
			ニュースデータ=モザンビークAPIのニュースデータのクローン
			ニュースベースパネルの表示=○
			ニュース更新中=×
			ニュース更新終了=×
		監視終わり
		ニュース更新開始する
	終わり
	
	大きさが変わった時の手順
		例外監視
			読み込み中ラベルの位置={0,0}
			読み込み中ラベルの大きさ={自分の実質大きさの幅,自分の実質大きさの高さ-プレイパネルの高さ}
			サーバーステータス取得失敗ラベルの位置={0,0}
			サーバーステータス取得失敗ラベルの大きさ=サーバーステータス取得失敗ラベルの親の大きさ
			// パネルの高さを自動調整する
			サーバーステータスパネルの高さ=(サーバーステータスパネルの子部品一覧すべての縦の最大値)+サーバーステータスパネルの子部品一覧(1)の高さ+サーバーステータスパネルの子部品一覧(1)の間隔(2)+サーバーステータスパネルの子部品一覧(1)の間隔(4)
		発生した場合
			「[エラーのメッセージ]」をデバッグログへ出力する
		監視終わり
		ニュース部品サイズ調整する
	終わり
	
	ニュースピクチャーのマウスのボタンが押された時の手順
		もしこの時のボタンが「左ボタン」なら
			もしニュースURLが無でないならニュースURLを開く
		もし終わり
	終わり
	
	ニュースタイトルラベルのマウスのボタンが押された時の手順
		もしこの時のボタンが「左ボタン」なら
			もしニュースURLが無でないならニュースURLを開く
		もし終わり
	終わり
	
	ニュース前ボタンがクリックされた時の手順
		ニュース前=○
	終わり
	
	ニュース次ボタンがクリックされた時の手順
		ニュース次=○
	終わり
	
	プレイボタンがクリックされた時の手順
		もしプロファイル選択リストの選択番号が0ならプロファイル選択リストの選択番号=1
		ApexLegendsをプロファイルID一覧(プロファイル選択リストの選択番号)で起動する
	終わり
	
	プロファイル一覧選択リスト切り替えボタンがクリックされた時の手順
		メインメニュープロファイル選択リスト一覧画面の表示=[メインメニュープロファイル選択リスト一覧画面の表示でない]
		メインメニュープロファイル選択リスト一覧画面の位置={メイン画面の横+10,メイン画面の縦+メイン画面の高さ-メインメニュープロファイル選択リスト一覧画面の高さ-10}
	終わり
終わり

メインメニュータブ部品とは
	カスタムウィンドウ部品を継承する
	
	+切り替え文:匿名手順
	
	はじめ(名前)の手順
		初期化する
		このドッキング方向=「左」
		この自動調整=◯
		タブラベルの内容=名前
		ーー貼り付けた部品に対する操作をここに書きます
	終わり
	初期化する手順
		ーー自動生成された手順です。ここにプログラムを書き加えても消える場合があります
		この位置と大きさを｛15,15,150,150｝に変える
		この内容を「メインメニュータブ部品」に変える
		タブスペーサーラベルというラベルを作る
			その位置と大きさを｛43,0,5,150｝に変える
			そのフォントを「Yu Gothic UI,9」に変える
			その移動順を2に変える
			そのドッキング方向を「左」に変える
		タブラベルというラベルを作る
			その位置と大きさを｛0,0,43,21｝に変える
			その内容を「プレイ」に変える
			そのフォントを「Yu Gothic UI,12」に変える
			その語尾省略を○に変える
			その自動調整を○に変える
			その文字配置を「中央」に変える
			その移動順を1に変える
			そのフォーカス移動可能を○に変える
			そのマウスカーソルを「手」に変える
			そのドッキング方向を「左」に変える
	終わり
	
	自分でクリック実行する手順
		「メインメニュー タブクリック: [タブラベルの内容]」をデバッグログへ出力する
		メイン画面:タブ選択解除する
		【タブフォント】=タブラベルのフォント
		タブフォントの装飾=「太字+下線」
		タブラベルのフォント=タブフォント
		切り替え文を実行する
	終わり
	
	タブラベルのマウスのボタンが押された時の手順
		もしこの時のボタンが「左ボタン」でないなら手順から抜け出す
		クリック実行する
	終わり
終わり