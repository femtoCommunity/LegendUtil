システム情報とは
	単一種類
	
	-パフォーマンスカウンター型:ドットネット型
	-パフォーマンスカウンターカテゴリー型:ドットネット型
	-CPUカウンター
	-GPUエンジンカウンターカテゴリー
	//-GPUメモリーカウンターカテゴリー
	
	-CPU名値:文字列
	-CPU生最大周波数値
	-CPU最大周波数値:文字列
	-CPUコア数値
	-CPUスレッド数値
	
	初期化する手順
		// CPU情報を取得する
		[WMIから「SELECT * FROM Win32_Processor」で取得したもの]のすべての【オブジェクト】についてそれぞれ繰り返す
			オブジェクトのすべての【要素】についてそれぞれ繰り返す
				要素の名前について分岐
				「Name」の場合 // CPU名
					CPU名値=要素の値
				「MaxClockSpeed」の場合 // CPU最大周波数
					CPU生最大周波数値=要素の値
				「NumberOfCores」の場合
					CPUコア数値=要素の値 // コア数
				「NumberOfLogicalProcessors」の場合 // スレッド数
					CPUスレッド数値=要素の値
				分岐終わり
			繰り返し終わり
		繰り返し終わり
		
		パフォーマンスカウンター型=ドットネット型(「System.Diagnostics.PerformanceCounter」)を作ったもの
		パフォーマンスカウンターカテゴリー型=ドットネット型(「System.Diagnostics.PerformanceCounterCategory」)を作ったもの
		
		CPUカウンター=パフォーマンスカウンター型からインスタンスを作ったもの
		CPUカウンターの「CategoryName」=「Process」
		CPUカウンターの「CounterName」=「% Processor Time」
		CPUカウンターの「InstanceName」=「_Total」
		
		RAMカウンター=パフォーマンスカウンター型からインスタンスを作ったもの
		RAMカウンターの「CategoryName」=「Memory」
		RAMカウンターの「CounterName」=「Available Mbytes」
		RAMカウンターの「InstanceName」=「_Total」
		
		GPUエンジンカウンターカテゴリー=パフォーマンスカウンターカテゴリー型から{「GPU Engine」}でインスタンスを作ったもの
		//GPUメモリーカウンターカテゴリー=パフォーマンスカウンターカテゴリー型から{「GPU Process Memory」}でインスタンスを作ったもの
	終わり
	
	CPU名という属性
		取得する手順:文字列
			CPU名値を返す
		終わり
	終わり
	
	CPUコア数という属性
		取得する手順:整数
			CPUコア数値の整数を返す
		終わり
	終わり
	
	CPUスレッド数という属性
		取得する手順:整数
			CPUスレッド数値の整数を返す
		終わり	
	終わり
	
	CPU生最大周波数という属性
		取得する手順:整数
			CPU生周波数値の整数を返す
		終わり
	終わり
	
	CPU最大周波数という属性
		取得する手順:文字列
			(CPU生最大周波数値/1000)&「 GHz」を返す
		終わり
	終わり
	
	自分で〈【PID:整数】として〉全カウンター設定する手順
		PIDとしてCPUカウンター設定する
		PIDとしてRAMカウンター設定する
		PIDとしてGPUカウンター一覧取得する
	終わり
	
	自分で〈【PID:整数】として〉CPUカウンター設定する手順
		【プロセス名:文字列】
		もしPIDが無ならPID=0
		もしPIDが0ならプロセス名=「_Total」 // 全体の合計
		そうでなければプロセス名=PIDのプロセスの名前
		CPUカウンターの「InstanceName」=プロセス名
	終わり
	
	自分からCPU使用率取得する手順:浮動小数
		-1を返す // 仮
		([CPUカウンター:NextValue()]/CPUコア数)を「1」桁切り捨てたものを返す // 係数が不明
	終わり
	
	自分で〈【PID:整数】として〉RAMカウンター設定する手順
		【プロセス名:文字列】
		もしPIDが無ならPID=0
		もしPIDが0ならプロセス名=「_Total」 // 全体の合計
		そうでなければプロセス名=PIDのプロセスの名前
		RAMカウンターの「InstanceName」=プロセス名
	終わり
	
	自分からRAM使用率取得する手順:浮動小数
		([RAMカウンター:NextValue()])を「1」桁切り捨てたものを返す
	終わり
	
	-GPU使用率カウンター一覧:配列
	-GPU総使用量メモリーカウンター一覧:配列
	-GPUカウンター一覧取得スレッド:スレッド
	自分で〈【PID:整数】として〉GPUカウンター一覧取得する手順
		手順から抜け出す // 仮
		もしGPUカウンター一覧取得スレッドが無でないなら手順から抜け出す
		
		GPUカウンター一覧取得スレッド=スレッドを作ったもの
			そのバックグラウンド=○
		
		GPUカウンター一覧取得スレッドで『
			「GPUカウンター取得 - PID: [PID]」をデバッグログへ出力する
			もしPIDが無ならPID=0
			
			【インスタンス名】
			【カウンター】
			【試行回数:整数】=0
			
			例外監視
				20回繰り返す
					試行回数=試行回数+1
					「- [試行回数]回目」をデバッグログへ出力する
					
					GPU使用率カウンター一覧=空の配列
					
					// GPUエンジン (使用率)
					[GPUエンジンカウンターカテゴリー:GetInstanceNames()]をインスタンス名へそれぞれ繰り返す
						もしPIDが0でないなら // PIDが0の場合はすべてのカウンターを返す
							// 指定されたPID以外のカウンターはスキップする
							もし「[PID]」が[インスタンス名を「_」で区切ったもの(2)]でないなら繰り返しを続ける
						もし終わり
						「 - インスタンス: [インスタンス名]」をデバッグログへ出力する
						[GPUエンジンカウンターカテゴリー:GetCounters(インスタンス名)]をカウンターへそれぞれ繰り返す
							もしカウンターの「CounterName」が「Utilization Percentage」なら
								GPU使用率カウンター一覧へカウンターを追加する
							もし終わり
						繰り返し終わり
					繰り返し終わり
					
					「- カウント: [GPU使用率カウンター一覧の個数]」をデバッグログへ出力する
					
					// GPUプロセスメモリー
					/*[GPUメモリーカウンターカテゴリー:GetInstanceNames()]をインスタンス名へそれぞれ繰り返す
						もしPIDが0でないなら // PIDが0の場合はすべてのカウンターを返す
							// 指定されたPID以外のカウンターはスキップする
							もし「[PID]」が[インスタンス名を「_」で区切ったもの(2)]でないなら繰り返しを続ける
						もし終わり
						「 - インスタンス: [インスタンス名]」をデバッグログへ出力する
						[GPUメモリーカウンターカテゴリー:GetCounters(インスタンス名)]をカウンターへそれぞれ繰り返す
							もしカウンターの「CounterName」が「Total Committed」なら
								GPU総使用量メモリーカウンター一覧へカウンターを追加する
							もし終わり
						繰り返し終わり
					繰り返し終わり*/
					
					//もしGPU使用率カウンター一覧の個数が1以上かつGPU総使用量メモリーカウンター一覧の個数が1以上なら繰り返しから抜け出す
					もしGPU使用率カウンター一覧の個数が1以上なら繰り返しから抜け出す
					
					1秒待つ
				繰り返し終わり
			発生した場合
				「GPUカウンター一覧取得エラー: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
				GPU使用率カウンター一覧=空の配列
			監視終わり
			
			インスタンス名=無
			カウンター=無
			
			「GPUカウンター: [GPU使用率カウンター一覧の個数]」をデバッグログへ出力する
		』を実行する
	終わり
	
	自分でGPUカウンター一覧削除する手順
		「GPUカウンター削除」をデバッグログへ出力する
		GPU使用率カウンター一覧=空の配列
		「GPUカウンター: [GPU使用率カウンター一覧の個数]」をデバッグログへ出力する
	終わり
	
	自分からGPU使用率取得する手順:浮動小数
		-1を返す // 仮
		もしGPU使用率カウンター一覧の個数が0なら-1を返す
		【値:浮動小数】=0.0
		GPU使用率カウンター一覧を【カウンター】へそれぞれ繰り返す
			値=値+[カウンター:NextValue()]
		繰り返し終わり
		値を「1」桁切り捨てたものを返す
	終わり
	
	自分からGPUメモリー総使用量取得する手順:浮動小数
		もしGPU総使用量メモリーカウンター一覧の個数が0なら-1を返す
		【値:浮動小数】=0.0
		GPU総使用量メモリーカウンター一覧を【カウンター】へそれぞれ繰り返す
			値=値+[カウンター:NextValue()]
		繰り返し終わり
		値を「1」桁切り捨てたものを返す
	終わり
終わり

/*
実行する手順
	システム情報:初期化する
	システム情報で35964として全カウンター設定する
	「
	  RAM使用率: [システム情報からRAM使用率取得したもの]
	  GPU使用率: [システム情報からGPU使用率取得したもの]
	GPUメモリー: [システム情報からGPUメモリー総使用量取得したもの]」を「情報アイコン」で表示する
終わり
*/
