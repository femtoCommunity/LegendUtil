ApexLegendsとは
	単一種類
	
	+監視有効:真偽値
	+監視スレッド:スレッド
	+プロセス:プロセス
	+プロセス起動中:真偽値
	+インストールパス:文字列
	+プロファイル:辞書
	
	+エラー一覧:辞書={
		1=「プロファイルの読み込み失敗」,
		2=「ディスプレイ解像度の変更失敗」,
		3=「Apex Legends の起動時エラー」,
		4=「Apex Legends の起動時エラー: 未インストール」,
		5=「Apex Legends のプロセス取得タイムアウト」,
		6=「Alt+Enter の自動押下待機時エラー」,
		7=「Alt+Enter の自動押下実行時エラー」,
		8=「Apex Legends の起動失敗」
	}
	
	はじめの手順
		監視有効=×
		プロセス起動中=×
	終わり
	
	起動引数という属性
		取得する手順
			起動引数取得したものを返す
		終わり
	終わり
	
	+Steam32ID一覧:配列
	Steam32ID取得する手順
		
	終わり
	
	+EAトークン一覧:配列
	EAトークン一覧取得する手順
		
	終わり
	
	
	
	〈【プラットフォーム:文字列】から〉起動引数取得する手順:文字列
		// EA app
		例外監視
			【フォルダー:文字列】=「C:\Users\[ウィンドウズのユーザ名]\AppData\Local\Electronic Arts\EA Desktop\」
			【テレメトリー:辞書】=[「[フォルダー]telemetry.ini」から「UTF-8」で読み込んだもの]を辞書化したもの
			// telemetry.ini にIDの項目が存在する場合はそこから取得する
			もしテレメトリーに「token」が存在するなら
				【ユーザーデータ:辞書】=[「[フォルダー]user_[テレメトリー(「token」)].ini」から「UTF-8」で読み込んだもの]を辞書化したもの
				
			そうでなければ
				【ユーザーデータファイル一覧】=空の配列
				「[フォルダー]」のファイルの一覧を【ファイル】へそれぞれ繰り返す
					もしファイルが「user_」で始まるかつファイルの拡張子だけが「ini」なら
						ユーザーデータファイル一覧へファイルを追加する
					もし終わり
				繰り返し終わり
				
			もし終わり
			ユーザーデータ(「user.gamecommandline.origin.ofr.50.0002694」)を返す
		発生した場合
			「起動引数の読み込みに失敗しました。[改行][改行][エラーのメッセージ]」を「中止アイコン」で表示する
			「」を返す
		監視終わり
	終わり
	
	インストール先一覧という属性
		取得する手順
			{0}でインストール先一覧取得したものを返す
		終わり
	終わり
	
	【プラットフォーム:配列】でインストール先一覧取得する手順:配列
		【一覧】=空の配列
		【プラットフォーム番号一覧:配列】=プラットフォーム
		
		もしプラットフォームが無ならプラットフォーム番号一覧={0}
		そうでなければプラットフォーム番号一覧=プラットフォーム
		もしプラットフォーム番号一覧が「{0}」ならプラットフォーム番号一覧={1,2}
		
		【インストール先】
		プラットフォーム番号一覧を【プラットフォーム番号】へそれぞれ繰り返す
			インストール先=プラットフォーム番号でインストール先取得したもの
			もしインストール先というフォルダが存在するなら一覧へインストール先を追加する
		繰り返し終わり
		一覧を返す
	終わり
	
	【プラットフォーム】でインストール先取得する手順:文字列
		【パス】=「」
		【インストール先】=「」
		プラットフォーム=「[プラットフォーム]」
		プラットフォームについて分岐
		「1」の場合 // Steam
			例外監視
			// レジストリーからSteamのインストール先を取得する
			【Steamパス】=[レジストリから「HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Valve\Steam\InstallPath」を取得したもの]
			// 取得したインストール先とライブラリーフォルダーのファイルが存在する場合、インストール先一覧に加える
			もし(Steamパスというフォルダが存在する)かつ(「[Steamパス]\steamapps\libraryfolders.vdf」というファイルが存在する)なら
				【Steamライブラリーフォルダー一覧ファイル】=「[Steamパス]\steamapps\libraryfolders.vdf」から「UTF-8」で読み込んだもの
				【Steamライブラリーフォルダー一覧】というVDF(Steamライブラリーフォルダー一覧ファイル)を作る
				Steamライブラリーフォルダー一覧の辞書(「libraryfolders」)の見出しを【番号】へそれぞれ繰り返す
					Steamライブラリーフォルダー一覧の辞書(「libraryfolders」)(番号)(「apps」)の見出しを【AppID】へそれぞれ繰り返す
						もしAppIDが「1172470」なら
							パス=[Steamライブラリーフォルダー一覧の辞書(「libraryfolders」)(番号)(「path」)]&「\steamapps\common\Apex Legends」
							もしパスというフォルダが存在するなら
								もしパスが「\」で終わらないならパス=パス&「\」
								インストール先=「」&パス
							もし終わり
						もし終わり
					繰り返し終わり
				繰り返し終わり
			もし終わり
			発生した場合
				インストール先=無
			監視終わり
			
		「2」の場合 // EA app (Origin)
			例外監視
			// レジストリーからApex Legendsのインストール先を取得する
			パス=レジストリから「HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Respawn\Apex\Install Dir」を取得したもの
			// 取得したインストール先フォルダーが存在する場合、インストール先一覧に加える
			もしパスというフォルダが存在するなら
				もしパスが「\」で終わらないならパス=パス&「\」
				インストール先=「」&パス
			もし終わり
			発生した場合
				インストール先=無
			監視終わり
			
		分岐終わり
		
		インストール先を返す
	終わり
	
	自分を〈【プロファイル名】で〉起動する手順
		// プロファイルを読み込む
		例外監視
			もしプロファイル名が無でないなら
				プロファイル=プロファイル管理器の一覧(プロファイル名)
				
			// プロファイル名が指定されていない場合は「Default」を読み込む
			そうでなければ
				プロファイル=プロファイル管理器の一覧(「Default」)
				
			もし終わり
		発生した場合
			{×,「プロファイルの読み込みに失敗しました。[改行][改行][エラーのメッセージ]」,1}を返す
		監視終わり
		
		メイン画面を表示する
		メイン画面:起動中パネル表示する
		メイン画面の起動中パネルの状態ラベルの内容=「起動処理中...」
		メイン画面の起動中パネルのプロファイル名ラベルの内容=プロファイル名
		メイン画面の起動中パネルのPIDラベルの内容=「」
		メイン画面の起動中パネルのカーソル状態ラベルの内容=「」
		メイン画面の起動中パネルのログテキストの内容=「」
		
		// システムのディスプレイ解像度を変更する
		例外監視
			もし(プロファイル(「Fullscreen_Stretched_Resolution」)(「Enable」)が○)かつ(プロファイル(「Fullscreen_Stretched_Resolution」)(「Change_System_Resolution」)が○)なら
				メイン画面の起動中パネルの状態ラベルの内容=「ディスプレイ解像度を変更中」
				【サイズ変更結果】=画面領域サイズを{プロファイル(「Fullscreen_Stretched_Resolution」)(「ResolutionWidth」), プロファイル(「Fullscreen_Stretched_Resolution」)(「ResolutionHeight」), プロファイル(「Fullscreen_Stretched_Resolution」)(「Refresh_Rate」)}へ変更する
				もしサイズ変更結果が「Successful」でないなら
					「エラー: [サイズ変更結果]」というエラーを発生させる
				もし終わり
			もし終わり
		発生した場合
			{×,「ディスプレイ解像度の変更に失敗しました。[改行][改行][エラーのメッセージ]」,2}を返す
		監視終わり
		
		インストールパス=プロファイル(「Apex_Legends」)(「EACBinaryPath」)
		// Apex Legends を起動する
		例外監視
			メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends を起動中」
			もしインストールパスというファイルが存在しないなら{×,「Apex Legends の起動に失敗しました。[改行]指定されたパス[「][インストールパス][」]に Apex Legends がインストールされていません。」,3}を返す
			「"」&インストールパス&「"」を起動する
		発生した場合
			{×,「Apex Legends の起動時にエラーが発生しました。[改行][改行][エラーのメッセージ]」,4}を返す
		監視終わり
		
		// Apex Legends が起動するまで待つ
		【待機時間】=30
		【待機時間カウント】=待機時間
		【Apexプロセス】=無
		待機時間回繰り返す
			例外監視
				メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends の起動を待機中 - 残り[待機時間カウント]秒」
				もし「r5apex」のプロセス一覧の個数が1以上なら
					Apexプロセス=「r5apex」のプロセス
				もし終わり
			発生した場合
				Apexプロセス=無
			監視終わり
			もしApexプロセスが無でないなら繰り返しから抜け出す
			待機時間カウント=待機時間カウント-1
			1秒待つ
		繰り返し終わり
		メイン画面の起動中パネルの状態ラベルの内容=「プロセスの起動を待機中」
		5秒待つ
		// Apex Legends が起動するまで待つ (2回目)
		待機時間カウント=待機時間
		Apexプロセス=無
		待機時間回繰り返す
			例外監視
				メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends の起動を待機中 - 残り[待機時間カウント]秒」
				もし「r5apex」のプロセス一覧の個数が1以上なら
					Apexプロセス=「r5apex」のプロセス
				もし終わり
			発生した場合
				Apexプロセス=無
			監視終わり
			もしApexプロセスが無でないなら繰り返しから抜け出す
			待機時間カウント=待機時間カウント-1
			1秒待つ
		繰り返し終わり
		
		もしApexプロセスが無なら
			{×,「時間内に Apex Legends のプロセスを取得出来ませんでした。」,5}を返す
		もし終わり
		
		自分を監視開始する
		
		// Alt+Enter の自動押下処理
		もし(プロファイル(「Fullscreen_Stretched_Resolution」)(「Enable」)が○)かつ(プロファイル(「Fullscreen_Stretched_Resolution」)(「Alt_Enter_Automatic_Press」)が○)なら
			// Alt+Enter 押下までの待機
			例外監視
				【AltEnter待機時間】=プロファイル(「Fullscreen_Stretched_Resolution」)(「Alt_Enter_Automatic_Press_Wait_Second」)
				もしAltEnter待機時間が1以上でないならAltEnter待機時間=30
				[AltEnter待機時間]秒待つ
			発生した場合
				{×,「Alt+Enter の自動押下待機時にエラーが発生しました。[改行][改行][エラーのメッセージ]」,6}を返す
			監視終わり
			
			// Alt+Enter の自動押下処理
			例外監視
				もしApexプロセスの起動中が○なら
					プロセスへ「%{Enter}」を入力する
					2秒待つ
					プロセスへ「%{Enter}」を入力する
				もし終わり
			発生した場合
				{×,「Alt+Enter の自動押下実行時にエラーが発生しました。[改行][改行][エラーのメッセージ]」,7}を返す
			監視終わり
		もし終わり
		
		もし(インストールパスというファイルが存在する)かつ(Apexプロセスの起動中が○)なら{○,「」}を返す
		そうでなければ{×,「Apex Legends の起動に失敗しました。設定に誤りがないか確認してもう一度お試しください。」,8}を返す
	終わり
	
	自分を監視開始する手順
		もし監視有効が○なら手順から抜け出す
		
		例外監視
		監視スレッドというスレッドを作る
		監視スレッドで『
			監視有効=○
			
			メイン画面を表示する
			メイン画面:起動中パネル表示する
			
			// プロセスを取得する
			例外監視
				プロセス=「r5apex」のプロセス
				プロセス起動中=プロセスの起動中
			発生した場合
				プロセス起動中=×
			監視終わり
			
			【カーソルロックスレッド:スレッド】
			
			監視有効が○の間、繰り返す
				// Apex Legendsが起動しているかチェック
				例外監視
					プロセス起動中=プロセスの起動中
				発生した場合
					プロセス起動中=×
				監視終わり
				もしプロセスが無ならプロセス起動中=×
				
				プロセス起動中について分岐
				○の場合
					メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends のプロセスを監視中」
					// Apex Legends のウィンドウが存在する場合、カーソルのロックを有効化する
					例外監視
						もし(カーソルロッカーのロック中が○でない)かつ(プロセスのメインウィンドウハンドルが0でない)なら
							もしカーソルロックスレッドの状態が「実行中」でないかつカーソルロックスレッドの状態が「待機」でないなら
								カーソルロックスレッドというスレッドを作る
								カーソルロックスレッドで『
									「[[][今][]] カーソルロック - ウィンドウハンドル: [プロセスのメインウィンドウハンドル]」をメイン画面の起動中パネルのログテキストへ改行して挿入する
									プロセスのメインウィンドウハンドルへカーソルロッカーでロックする
									カーソルロッカーでロック解除する
								』を実行する
							もし終わり
						もし終わり
						
						メイン画面の起動中パネルのPIDラベルの内容=プロセスのID
						メイン画面の起動中パネルのカーソル状態ラベルの内容=「[カーソルロックスレッドの状態]」
					発生した場合
						//「[[][今][]] カーソルロック失敗」をメイン画面の起動中パネルのログテキストへ改行して挿入する
					監視終わり
					
				×の場合
					メイン画面の起動中パネルの状態ラベルの内容=「終了処理中...」
					メイン画面の起動中パネルのPIDラベルの内容=「」
					監視終了する
					
				分岐終わり
				0.1秒待つ
			繰り返し終わり
		』を実行する
		発生した場合
			監視終了する
		監視終わり
	終わり
	
	自分を監視終了する手順
		監視有効=×
		// ロックが解除できていないと困るので念のためカーソルのロックを解除する
		カーソルロッカーでロック解除する
		「[[][今][]] カーソルロック解除」をメイン画面の起動中パネルのログテキストへ改行して挿入する
		
		// ディスプレイの解像度を戻す
		もし(プロファイル(「Fullscreen_Stretched_Resolution」)(「Enable」)が○)かつ(プロファイル(「Fullscreen_Stretched_Resolution」)(「Change_System_Resolution」)が○)なら
			【サイズ変更結果】=画面領域サイズを{メイン設定について「Display」から「Resolution_Width」を取得したもの, メイン設定について「Display」から「Resolution_Width」を取得したもの, メイン設定について「Display」から「RefreshRate」を取得したもの}へ変更する
			もしサイズ変更結果が「Successful」でないなら
				「[[][今][]] ディスプレイ解像度変更 - 失敗: [サイズ変更結果]」をメイン画面の起動中パネルのログテキストへ改行して挿入する
			もし終わり
		もし終わり
		
		3秒待つ
		メイン画面の起動中パネルの状態ラベルの内容=「」
		メイン画面:起動中パネル隠す
	終わり
終わり