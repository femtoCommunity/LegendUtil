ApexLegendsとは
	単一種類
	
	+監視有効:真偽値
	+監視スレッド:スレッド
	+プロセス:プロセス
	+プロセス起動中:真偽値
	+インストールパス:文字列
	+EACインストールパス:文字列
	+プロファイル:辞書
	
	+初期ビデオコンフィグ:辞書
	+初期起動引数:文字列
	
	+コンフィグフォルダー:文字列=「[プロファイルフォルダ]Saved Games\Respawn\Apex\local\」
	
	はじめの手順
		監視有効=×
		プロセス起動中=×
	終わり
	
	起動引数という属性
		取得する手順
			起動引数取得したものを返す
		終わり
	終わり
	
	+Steam32ID一覧:配列
	Steam32ID取得する手順
		
	終わり
	
	+EAトークン一覧:配列
	EAトークン一覧取得する手順
		
	終わり
	
	
	〈【プラットフォーム:文字列】から〉起動引数取得する手順:文字列
		// EA app
		例外監視
			【フォルダー:文字列】=「C:\Users\[ウィンドウズのユーザ名]\AppData\Local\Electronic Arts\EA Desktop\」
			【テレメトリー:辞書】=[「[フォルダー]telemetry.ini」から「UTF-8」で読み込んだもの]を辞書化したもの
			// telemetry.ini にIDの項目が存在する場合はそこから取得する
			もしテレメトリーに「token」が存在するなら
				【ユーザーデータ:辞書】=[「[フォルダー]user_[テレメトリー(「token」)].ini」から「UTF-8」で読み込んだもの]を辞書化したもの
				
			そうでなければ
				【ユーザーデータファイル一覧】=空の配列
				「[フォルダー]」のファイルの一覧を【ファイル】へそれぞれ繰り返す
					もしファイルが「user_」で始まるかつファイルの拡張子だけが「ini」なら
						ユーザーデータファイル一覧へファイルを追加する
					もし終わり
				繰り返し終わり
				
			もし終わり
			ユーザーデータ(「user.gamecommandline.origin.ofr.50.0002694」)を返す
		発生した場合
			「起動引数の読み込みに失敗しました。[改行][改行][エラーのメッセージ]」を「中止アイコン」で表示する
			「」を返す
		監視終わり
	終わり
	
	-ビルドデータ:文字列
	ビルドという属性
		取得する手順
			ビルドデータを返す
		終わり
	終わり
	
	-バージョンデータ:文字列
	バージョンという属性
		取得する手順
			バージョンデータを返す
		終わり
	終わり
	
	インストール先一覧という属性
		取得する手順
			{0}でインストール先一覧取得したものを返す
		終わり
	終わり
	
	【プラットフォーム:配列】でインストール先一覧取得する手順:配列
		【一覧】=空の配列
		【プラットフォーム番号一覧:配列】=プラットフォーム
		
		もしプラットフォームが無ならプラットフォーム番号一覧={0}
		そうでなければプラットフォーム番号一覧=プラットフォーム
		もしプラットフォーム番号一覧が「{0}」ならプラットフォーム番号一覧={「Steam」,「EA app」}
		
		【インストール先】
		プラットフォーム番号一覧を【プラットフォーム番号】へそれぞれ繰り返す
			インストール先=プラットフォーム番号でインストール先取得したもの
			もしインストール先というフォルダが存在するなら一覧へインストール先を追加する
		繰り返し終わり
		一覧を返す
	終わり
	
	【プラットフォーム】でインストール先取得する手順:文字列
		【パス】=「」
		【インストール先】=「」
		プラットフォーム=「[プラットフォーム]」
		プラットフォームについて分岐
		「Steam」の場合 // Steam
			例外監視
			// レジストリーからSteamのインストール先を取得する
			【Steamパス】=Steamのインストール先
			// 取得したインストール先とライブラリーフォルダーのファイルが存在する場合、インストール先一覧に加える
			もし(Steamパスというフォルダが存在する)かつ(「[Steamパス]\steamapps\libraryfolders.vdf」というファイルが存在する)なら
				【ファイル】=「[Steamパス]\steamapps\libraryfolders.vdf」から「UTF-8」で読み込んだもの
				【ライブラリー】=ファイルをVDF形式として読み取ったものをJSON形式として読み取ったもの
				ライブラリー(「libraryfolders」)の見出しを【番号】へそれぞれ繰り返す
					ライブラリー(「libraryfolders」)(番号)(「apps」)の見出しを【AppID】へそれぞれ繰り返す
						もしAppIDが「1172470」なら
							パス=[ライブラリー(「libraryfolders」)(番号)(「path」)]&「\steamapps\common\Apex Legends」
							もしパスというフォルダが存在するなら
								もしパスが「\」で終わらないならパス=パス&「\」
								インストール先=「」&パス
							もし終わり
						もし終わり
					繰り返し終わり
				繰り返し終わり
			もし終わり
			発生した場合
				インストール先=無
			監視終わり
			
		「EA app」の場合 // EA app (Origin)
			例外監視
			// レジストリーからApex Legendsのインストール先を取得する
			パス=レジストリから「HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Respawn\Apex\Install Dir」を取得したもの
			// 取得したインストール先フォルダーが存在する場合、インストール先一覧に加える
			もしパスというフォルダが存在するなら
				もしパスが「\」で終わらないならパス=パス&「\」
				インストール先=「」&パス
			もし終わり
			発生した場合
				インストール先=無
			監視終わり
			
		分岐終わり
		
		インストール先を返す
	終わり
	
	自分で【設定:配列】へ解像度変更する手順
		もし「[コンフィグフォルダー]videoconfig.txt」というファイルが存在するなら
			ビデオコンフィグ変更=○
			「ビデオコンフィグの編集を開始」をログ出力する
			
			// ビデオコンフィグのバックアップを作成
			//「[コンフィグフォルダー]videoconfig.txt」を「[アプリのコンフィグフォルダー]Backup\VideoConfig\videoconfig_[今を「yyyyMMdd-HHmmss」に整えたもの].txt」へコピーする
			
			// ビデオコンフィグを読み込む
			【コンフィグファイル】=「[コンフィグフォルダー]videoconfig.txt」から読み込んだもの
			「ビデオコンフィグ: [コンフィグファイルをVDF形式として読み取ったもの]」をデバッグログへ出力する
			【コンフィグ】=[コンフィグファイルをVDF形式として読み取ったもの]をJSON形式として読み取ったもの
			
			初期ビデオコンフィグ=[コンフィグファイルをVDF形式として読み取ったもの]をJSON形式として読み取ったもの
			
			コンフィグ(「VideoConfig」)(「setting.defaultres」)=「[設定(1)]」
			コンフィグ(「VideoConfig」)(「setting.defaultresheight」)=「[設定(2)]」
			コンフィグ(「VideoConfig」)(「setting.fullscreen」)=「1」
			コンフィグ(「VideoConfig」)(「setting.nowindowborder」)=「0」
			
			// ビデオコンフィグファイルを削除する
			「[コンフィグフォルダー]videoconfig.txt」へ「標準」というファイル属性を設定する
			「[コンフィグフォルダー]videoconfig.txt」を削除する
			// 編集したビデオコンフィグをファイルに保存する
			コンフィグをJSON形式として書き出したものをVDF形式として書き出したものを「[コンフィグフォルダー]videoconfig.txt」へ保存する
			// ファイルを読み取り専用にする
			//「[コンフィグフォルダー]videoconfig.txt」へ「読み取り専用」というファイル属性を設定する
			○を返す
			
		そうでなければ
			ビデオコンフィグ変更=×
			×を返す
			
		もし終わり
	終わり
	
	
	+ステータス番号
	+エラー一覧:辞書={
		「0」={「既に起動処理中です。」},
		「1」={「プロファイルの読み込みに失敗しました。」},
		「2」={「ディスプレイ解像度の変更の失敗しました。」},
		「3」={「Apex Legends の起動時にエラーが発生しました。」},
		「4」={「Apex Legends を起動できませんでした。Apex Legends がインストールされていない可能性があります。」},
		「5」={「Apex Legends のプロセス取得がタイムアウトしました。」},
		「6」={「Alt+Enter 自動押下の待機時にエラーが発生しました。」},
		「7」={「Alt+Enter 自動押下の実行時にエラーが発生しました。」},
		「8」={「Apex Legends の起動に失敗しました。」},
		「9」={「起動引数の変更失敗」},
		「10」={「ビデオコンフィグの変更に失敗しました。」},
		「11」={「プロセスの待機がキャンセルされました。」}
	}
	-プロファイル名:文字列
	-起動処理スレッド:スレッド
	-起動処理オプション:配列
	自分を【プロファイル名前】で〈【オプション:配列】として〉起動する手順
		もしオプションが無なら起動処理オプション=空の配列
		そうでなければ起動処理オプション=オプション
		
		【起動処理結果】
		
		メイン画面を表示する
		メイン画面:起動中パネル表示する
		メイン画面の起動中パネルの状態ラベルの内容=「起動処理中...」
		メイン画面の起動中パネルのプロファイル名ラベルの内容=プロファイル名
		メイン画面の起動中パネルのPIDラベルの内容=「」
		メイン画面の起動中パネルのカーソル状態ラベルの内容=「」
		メイン画面の起動中パネルのログテキストの内容=「」
		
		起動処理スレッドというスレッドを作る
		起動処理スレッドで『
		
		例外監視
			プロファイル名=プロファイル名前
			プロファイル名で起動処理開始する
		発生した場合
			// エラーが発生した場合は起動中パネルを閉じて、エラーダイアログを表示する
			もし起動処理オプションから「ショートカット」を完全一致で探したものの個数が1以上でないなら監視終了する
			
			「<エラー番号: [ステータス番号]>[改行][エラー一覧(「[ステータス番号]」)(1)][改行][改行][エラーのメッセージ]」を「警告アイコン」で表示する
			
			// 直接プロファイルを起動した場合はアプリを終了する
			もし起動処理オプションから「ショートカット」を完全一致で探したものの個数が1以上なら
				監視終了する
				アプリを終了する
			もし終わり
			
			起動処理中=×
			
			メイン画面のメインメニューパネルの有効=○
			メイン画面:起動中パネル隠す
		監視終わり
		
		』を実行する
	終わり
	
	-ビデオコンフィグ変更:真偽値
	-起動処理中:真偽値
	自分を〈【プロファイル名】で〉起動処理開始する手順
		ステータス番号=0
		もし起動処理中が○なら
			「起動処理エラー」というエラーを発生させる
		もし終わり
		
		「起動処理開始」をデバッグログへ出力する
　		プロファイル読み込む
		
		起動処理中=○
		
		初期ビデオコンフィグ=無
		
		インストールパス取得する
		起動引数設定する
		
		// ビデオコンフィグを編集する (解像度の変更が有効の場合のみ)
		ビデオコンフィグ編集する
		
		// システム(PC自体)のディスプレイ解像度を変更する (システムの解像度変更が有効の場合のみ)
		システムディスプレイ解像度変更する
		
		// Apex Legends を起動する
		プロセス起動する
		プロセス起動待機する
		
		自分を監視開始する
		
		AltEnter自動押下実行する
		
		起動処理中=×
		
		もし(インストールパスというファイルが存在する)かつ(Apexプロセスの起動中が○)なら
			{○}を返す
			
		そうでなければ
			{×,「Apex Legends の起動に失敗しました。設定に誤りがないか確認してからもう一度お試しください。」,8}を返す
			
		もし終わり
	終わり
	
	////////// 起動処理の手順 //////////
	+実行ファイル名:文字列
	プロファイル読み込む手順
		ステータス番号=1
		// プロファイルを読み込む
		プロファイル=空の辞書
		もしプロファイル名が無でないなら
			もしプロファイル管理器の一覧の見出しからプロファイル名を完全一致で探したものの個数が1以上なら
				プロファイル=プロファイル管理器の一覧(プロファイル名)
				
			そうでなければ
				ステータス番号=1
				「指定されたプロファイルは存在しません。」というエラーを発生させる
				
			もし終わり
			
		// プロファイル名が指定されていない場合は「Default」を読み込む
		そうでなければ
			プロファイル=プロファイル管理器の一覧(「Default」)
			
		もし終わり
		
		もしプロファイル(「Command_Line_Arguments」)(「Value」)が「-eac_launcher_settings SettingsDX12.json」を含むなら
			実行ファイル名=「r5apex_dx12」
			
		そうでなければ
			実行ファイル名=「r5apex」
				
		もし終わり
		
		// インストールされているゲームのビルドとバージョンを取得
		例外監視
			【インストール先】=プロファイル(「Apex_Legends」)(「BinaryPath」)のフォルダだけ
			ビルドデータ=テキストファイル読取器:「[インストール先]build.txt」から「UTF-8」で読み取ったもの
			バージョンデータ=テキストファイル読取器:「[インストール先]gameversion.txt」から「UTF-8」で読み取ったもの
		発生した場合
			ビルドデータ=「取得できませんでした」
			バージョンデータ=「取得できませんでした」
		監視終わり
		
		メイン画面の起動中パネルのビルドラベルの内容=ビルド
		メイン画面の起動中パネルのバージョンラベルの内容=バージョン
	終わり	
	
	インストールパス取得する手順
		ステータス番号=3
		// EACランチャーのパスを取得する 取得できなければエラー
		「インストールパスを取得」をログ出力する
		インストールパス=プロファイル(「Apex_Legends」)(「BinaryPath」)
		もしインストールパスのフォルダだけ&「\EasyAntiCheat_launcher.exe」というファイルが存在するなら
			プロファイル(「Apex_Legends」)(「EACBinaryPath」)=「[インストールパスのフォルダだけ]\EasyAntiCheat_launcher.exe」
			「- パス: [インストールパス]」をログ出力する
			
		そうでなければ
			監視終了する
			{×,「Apex Legends の起動に失敗しました。[改行]指定されたパス[「][インストールパスのフォルダだけ][」]に[「]EasyAntiCheat_launcher.exe[」]が見つかりませんでした。」,3}を返す
			
		もし終わり
	終わり
	
	起動引数設定する手順
		ステータス番号=9
		「起動引数を設定中...」をログ出力する
		「- 値: [プロファイル(「Command_Line_Arguments」)(「Value」)]」をログ出力する
		
		EAappで○としてコンフィグ読み込む
		
		// 起動引数を設定する
		「起動引数を設定」をデバッグログへ出力する
		プロファイル(「Apex_Legends」)(「Platform」)について分岐
		「EA app」の場合
			初期起動引数=EAappの起動引数
			EAappの起動引数=[プロファイル(「Command_Line_Arguments」)(「Value」)]
		分岐終わり
		
		メイン画面の起動中パネルの起動引数テキストの内容=「[プロファイル(「Command_Line_Arguments」)(「Value」)]」
		
		「完了」をログ出力する
	終わり
	
	ビデオコンフィグ編集する手順
		ステータス番号=10
		// ビデオコンフィグを編集する (解像度)
		【設定】={プロファイル(「Change_Display_Resolution」)(「ResolutionWidth」),プロファイル(「Change_Display_Resolution」)(「ResolutionHeight」)}
		もし「[コンフィグフォルダー]videoconfig.txt」というファイルが存在するなら
			ビデオコンフィグ変更=○
			「ビデオコンフィグの編集を開始」をログ出力する
			
			// ビデオコンフィグのバックアップを作成
			//「[コンフィグフォルダー]videoconfig.txt」を「[アプリのコンフィグフォルダー]Backup\VideoConfig\videoconfig_[今を「yyyyMMdd-HHmmss」に整えたもの].txt」へコピーする
			
			// ビデオコンフィグを読み込む
			【コンフィグファイル】=「[コンフィグフォルダー]videoconfig.txt」から読み込んだもの
			「ビデオコンフィグ: [コンフィグファイルをVDF形式として読み取ったもの]」をデバッグログへ出力する
			【コンフィグ】=[コンフィグファイルをVDF形式として読み取ったもの]をJSON形式として読み取ったもの
			
			初期ビデオコンフィグ=[コンフィグファイルをVDF形式として読み取ったもの]をJSON形式として読み取ったもの
			
			コンフィグ(「VideoConfig」)(「setting.defaultres」)=「[設定(1)]」
			コンフィグ(「VideoConfig」)(「setting.defaultresheight」)=「[設定(2)]」
			コンフィグ(「VideoConfig」)(「setting.fullscreen」)=「1」
			コンフィグ(「VideoConfig」)(「setting.nowindowborder」)=「0」
			
			// ビデオコンフィグファイルを削除する
			「[コンフィグフォルダー]videoconfig.txt」へ「標準」というファイル属性を設定する
			「[コンフィグフォルダー]videoconfig.txt」を削除する
			// 編集したビデオコンフィグをファイルに保存する
			コンフィグをJSON形式として書き出したものをVDF形式として書き出したものを「[コンフィグフォルダー]videoconfig.txt」へ保存する
			// ファイルを読み取り専用にする
			//「[コンフィグフォルダー]videoconfig.txt」へ「読み取り専用」というファイル属性を設定する
			「完了」をログ出力する
			○を返す
			
		そうでなければ
			ビデオコンフィグ変更=×
			×を返す
			
		もし終わり
	終わり
	
	システムディスプレイ解像度変更する手順
		ステータス番号=2
		// システムのディスプレイ解像度を変更する
		もし(プロファイル(「Change_Display_Resolution」)(「Enable」)が○)かつ(プロファイル(「Change_Display_Resolution」)(「Change_System_Resolution」)が○)なら
			「システムのディスプレイ解像度を変更中...」をログ出力する
			メイン画面の起動中パネルの状態ラベルの内容=「ディスプレイ解像度を変更中」
			【サイズ変更結果】=画面領域サイズを{プロファイル(「Change_Display_Resolution」)(「ResolutionWidth」), プロファイル(「Change_Display_Resolution」)(「ResolutionHeight」), プロファイル(「Change_Display_Resolution」)(「Refresh_Rate」)}へ変更する
			もしサイズ変更結果が「Successful」でないなら
				「エラー内容: [サイズ変更結果]」というエラーを発生させる
			もし終わり
		もし終わり
		「完了」をログ出力する
	終わり
	
	プロセス起動する手順
		ステータス番号=3
		// Apex Legends を起動する
		EACインストールパス=プロファイル(「Apex_Legends」)(「EACBinaryPath」)
		「Apex Legends を起動中...」をログ出力する
		メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends を起動中」
		もしEACインストールパスというファイルが存在しないなら
			監視終了する
			{×,「Apex Legends の起動に失敗しました。[改行]指定されたパス[「][インストールパス][」]にファイルが見つかりませんでした。」,3}を返す
		もし終わり
		
		// 起動引数を取得する
		【起動引数:文字列】=「[プロファイル(「Command_Line_Arguments」)(「Value」)]」
		
		「- プラットフォーム: [プロファイル(「Apex_Legends」)(「Platform」)]」をログ出力する
		
		////////// EA app //////////
		もしプロファイル(「Apex_Legends」)(「Platform」)が「EA app」なら
			// プラットフォームが EA app の場合は、起動引数を読み込ませるために EA app を終了する
			例外監視
				
				「EA app のプロセスを取得」をログ出力する
				【EAappプロセス】=「EADesktop」のプロセス
				EAappプロセスを終了する
				「- PID: [EAappプロセスのID]」をログ出力する
				「EA app のプロセスを終了」をログ出力する
			発生した場合
				「- プロセス取得 - 失敗: [エラーのメッセージ]」をログ出力する
			監視終わり
			
			// EAC(Apex Legends)のランチャーを起動
			//「- 起動: [EACインストールパス]」をログ出力する
			//「"[EACインストールパス]"」を起動する
			「- URLスキーム: origin2://game/launch/?offerIds=194908」をログ出力する
			「origin2://game/launch/?offerIds=194908」を開く
		もし終わり
		////////// EA app //////////
		
		////////// Steam //////////
		もしプロファイル(「Apex_Legends」)(「Platform」)が「Steam」なら
			「- 起動: [Steamのインストール先]steam.exe -applaunch 1172470 [起動引数]」をログ出力する
			「[Steamのインストール先]steam.exe」を「-applaunch 1172470 [起動引数]」として起動する
		もし終わり
		////////// Steam //////////
		
		//「"[EAappのインストール先]EA Desktop\compatibility32\EADesktop.exe"」を「[EAappプロセスのID]」として起動する
	終わり
	
	+待機キャンセル:真偽値
	プロセス起動待機する手順
		ステータス番号=3
		
		メイン画面の起動中パネルのキャンセルボタンを表示する
		
		// Apex Legends が起動するまで待つ
		【待機時間】=120
		【待機時間カウント】=待機時間
		【Apexプロセス】=無
		待機時間回繰り返す
			例外監視
				メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends の起動を待機中 - 残り[待機時間カウント]秒」
				もし実行ファイル名のプロセス一覧の個数が1以上なら
					Apexプロセス=実行ファイル名のプロセス
				もし終わり
			発生した場合
				Apexプロセス=無
			監視終わり
			もしApexプロセスが無でないなら繰り返しから抜け出す
			待機時間カウント=待機時間カウント-1
			もし待機キャンセルが○なら繰り返しから抜け出す
			1秒待つ
		繰り返し終わり
		
		もし待機キャンセルが○なら
			ステータス番号=11
			メイン画面の起動中パネルのキャンセルボタンを隠す
			待機キャンセル=×
			「」というエラーを発生させる
		もし終わり
		
		もしApexプロセスが無なら
			「時間内に Apex Legends のプロセスを取得出来ませんでした。」というエラーを発生させる
		もし終わり
		
		メイン画面の起動中パネルのキャンセルボタンを隠す
		
		// EA app で起動した場合は一度 R5Apex.exe が終了するので2回目の取得を行う
		/*もしプロファイル(「Apex_Legends」)(「Platform」)が「EA app」なら
			「Apex Legends の起動を待機中...」をログ出力する
			メイン画面の起動中パネルの状態ラベルの内容=「プロセスの起動を待機中」
			5秒待つ
			// Apex Legends が起動するまで待つ (2回目)
			待機時間カウント=待機時間
			Apexプロセス=無
			待機時間回繰り返す
				例外監視
					メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends の起動を待機中 - 残り[待機時間カウント]秒」
					もし「r5apex」のプロセス一覧の個数が1以上なら
						Apexプロセス=「r5apex」のプロセス
					もし終わり
				発生した場合
					Apexプロセス=無
				監視終わり
				もしApexプロセスが無でないなら繰り返しから抜け出す
				待機時間カウント=待機時間カウント-1
				1秒待つ
			繰り返し終わり
			
			もしApexプロセスが無なら
				監視終了する
				{×,「時間内に Apex Legends のプロセスを取得出来ませんでした。」,5}を返す
			もし終わり
		もし終わり*/
	終わり
	
	AltEnter自動押下実行する手順
		// Alt+Enter の自動押下処理
		もし(プロファイル(「Change_Display_Resolution」)(「Enable」)が○)かつ(プロファイル(「Change_Display_Resolution」)(「Alt_Enter_Automatic_Press」)が○)なら
			ステータス番号=6
			// Alt+Enter 押下までの待機
			【AltEnter待機時間】=プロファイル(「Change_Display_Resolution」)(「Alt_Enter_Automatic_Press_Wait_Second」)
			もしAltEnter待機時間が1以上でないならAltEnter待機時間=30
			「Alt+Enter の自動押下の実行まで待機中」をログ出力する
			「- 待機時間: [AltEnter待機時間]秒」をログ出力する
			[AltEnter待機時間]秒待つ
			
			ステータス番号=7
			// Alt+Enter の自動押下処理
			「Alt+Enter の自動押下を実行」をログ出力する
			もしプロセスの起動中が○なら
				プロセスへ「%{Enter}」を入力する
				2秒待つ
				プロセスへ「%{Enter}」を入力する
			もし終わり
		もし終わり
	終わり
	////////// 起動処理の手順 //////////
	
	自分を監視開始する手順
		もし監視有効が○なら手順から抜け出す
		
		例外監視
		監視スレッドというスレッドを作る
		監視スレッドで『
			監視有効=○
			
			メイン画面を表示する
			メイン画面:起動中パネル表示する
			
			// プロセスを取得する
			例外監視
				プロセス=実行ファイル名のプロセス
				プロセス起動中=プロセスの起動中
			発生した場合
				プロセス起動中=×
			監視終わり
			
			【カーソルロックスレッド:スレッド】
			
			「Apex Legends のプロセスを監視開始します...」をログ出力する
			「- PID: [プロセスのID]」をログ出力する
			
			監視有効が○の間、繰り返す
				// Apex Legendsが起動しているかチェック
				例外監視
					プロセス起動中=プロセスの起動中
				発生した場合
					プロセス起動中=×
				監視終わり
				もしプロセスが無ならプロセス起動中=×
				
				もしプロセス起動中が○なら
					メイン画面の起動中パネルの状態ラベルの内容=「Apex Legends のプロセスを監視中」
					// Apex Legends のウィンドウが存在する場合、カーソルのロックを有効化する
					例外監視
						もし(カーソルロッカーのロック中が○でない)かつ(プロセスのメインウィンドウハンドルが0でない)なら
							もしカーソルロックスレッドの状態が「実行中」でないかつカーソルロックスレッドの状態が「待機」でないなら
								カーソルロックスレッドというスレッドを作る
								カーソルロックスレッドで『
									「カーソルロック有効化」をログ出力する
									「- ウィンドウハンドル: [プロセスのメインウィンドウハンドル]」をログ出力する	
									プロセスのメインウィンドウハンドルへカーソルロッカーでロックする
									カーソルロッカーでロック解除する
								』を実行する
							もし終わり
						もし終わり
						
						メイン画面の起動中パネルのPIDラベルの内容=プロセスのID
						メイン画面の起動中パネルのカーソル状態ラベルの内容=「[カーソルロックスレッドの状態]」
					発生した場合
						//「[[][今][]] カーソルロック失敗」をメイン画面の起動中パネルのログテキストへ改行して挿入する
					監視終わり
					
				そうでなければ
					メイン画面の起動中パネルの状態ラベルの内容=「終了処理中...」
					メイン画面の起動中パネルのPIDラベルの内容=「」
					監視有効=×
					監視終了する
					
				もし終わり
				0.5秒待つ
			繰り返し終わり
			起動処理中=×
		』を実行する
		発生した場合
			監視終了する
		監視終わり
	終わり
	
	自分を監視終了する手順
		監視有効=×
		「プロセスの監視を終了します...」をログ出力する
		// ロックが解除できていないと困るので念のためカーソルのロックを解除する
		カーソルロッカーでロック解除する
		「カーソルロック無効化」をログ出力する		
		// ディスプレイの解像度を戻す
		もしプロファイルに「Change_Display_Resolution」が存在するなら
			もし(プロファイル(「Change_Display_Resolution」)(「Enable」)が○)かつ(プロファイル(「Change_Display_Resolution」)(「Change_System_Resolution」)が○)なら
				【サイズ変更結果】=画面領域サイズを{メイン設定について「Display」から「Resolution_Width」を取得したもの, メイン設定について「Display」から「Resolution_Height」を取得したもの, メイン設定について「Display」から「RefreshRate」を取得したもの}へ変更する
				もしサイズ変更結果が「Successful」でないなら
					「ディスプレイ解像度変更 - 失敗: [サイズ変更結果]」をログ出力する
				もし終わり
			もし終わり
		もし終わり
		
		// 起動引数を戻す
		もしプロファイルに「Apex_Legends」が存在するなら
			プロファイル(「Apex_Legends」)(「Platform」)について分岐
			「Steam」の場合
				//Steamの起動引数=初期起動引数
			
			「EA app」の場合
				// EA app を終了する
				/*例外監視
					「EA app のプロセスを取得」をログ出力する
					【EAappプロセス】=「EADesktop」のプロセス
					
					10回繰り返す
						//もしEAappプロセスのメインウィンドウハンドルが0でないなら繰り返しから抜け出す
						1秒待つ
					繰り返し終わり
					
					EAappプロセスを終了する
					「- PID: [EAappプロセスのID]」をログ出力する
					「EA app のプロセスを終了」をログ出力する
				発生した場合
					「- プロセス取得 - 失敗: [エラーのメッセージ]」をログ出力する
				監視終わり*/
				// 起動引数をもとに戻す
				EAappの起動引数=初期起動引数
				
			分岐終わり
		もし終わり
		
		// ビデオコンフィグファイルを削除する
		もし(「[コンフィグフォルダー]videoconfig.txt」というファイルが存在する)かつ(ビデオコンフィグ変更が○)なら
			「初期ビデオコンフィグ: [初期ビデオコンフィグをJSON形式として書き出したもの]」をデバッグログへ出力する
			
			【コンフィグファイル】=「[コンフィグフォルダー]videoconfig.txt」から読み込んだもの
			【コンフィグ】=[コンフィグファイルをVDF形式として読み取ったもの]をJSON形式として読み取ったもの
			「コンフィグ種類: [コンフィグの種類名]」をデバッグログへ出力する
			
			「現在ビデオコンフィグ: [コンフィグファイルをVDF形式として読み取ったもの]」をデバッグログへ出力する
			
			// ビデオコンフィグを元に戻す
			もしコンフィグに「VideoConfig」が存在するなら
				もしコンフィグ(「VideoConfig」)に「setting.defaultres」が存在するなら、コンフィグ(「VideoConfig」)へ「setting.defaultres」として「[初期ビデオコンフィグ(「VideoConfig」)(「setting.defaultres」)]」を設定する
				もしコンフィグ(「VideoConfig」)に「setting.defaultresheight」が存在するなら、コンフィグ(「VideoConfig」)へ「setting.defaultresheight」として「[初期ビデオコンフィグ(「VideoConfig」)(「setting.defaultresheight」)]」を設定する
				もしコンフィグ(「VideoConfig」)に「setting.fullscreen」が存在するなら、コンフィグ(「VideoConfig」)へ「setting.fullscreen」として「[初期ビデオコンフィグ(「VideoConfig」)(「setting.fullscreen」)]」を設定する
				もしコンフィグ(「VideoConfig」)に「setting.nowindowborder」が存在するなら、コンフィグ(「VideoConfig」)へ「setting.nowindowborder」として「[初期ビデオコンフィグ(「VideoConfig」)(「setting.nowindowborder」)]」を設定する
				「更新後ビデオコンフィグ: [コンフィグをJSON形式として書き出したもの]」をデバッグログへ出力する
				
				// 現在のコンフィグファイルを削除する
				「[コンフィグフォルダー]videoconfig.txt」へ「標準」というファイル属性を設定する
				「[コンフィグフォルダー]videoconfig.txt」を削除する
				
				// 更新したコンフィグをファイルへ保存
				コンフィグをJSON形式として書き出したものをVDF形式として書き出したものを「[コンフィグフォルダー]videoconfig.txt」へ保存する
				
				// 保存したファイルを読み取り専用にする
				//「[コンフィグフォルダー]videoconfig.txt」へ「読み取り専用」というファイル属性を設定する
			もし終わり
		もし終わり
		
		// 直接プロファイルを起動した場合はアプリを終了する
		もし起動処理オプションから「ショートカット」を完全一致で探したものの個数が1以上なら
			アプリを終了する
		もし終わり
		
		2秒待つ
		
		メイン画面の起動中パネルの状態ラベルの内容=「」
		メイン画面:起動中パネル隠す
	終わり
	
	【内容:文字列】をログ出力する手順
		内容をデバッグログへ出力する
		「[[][今を「yyyy/MM/dd HH:mm:ss」に整えたもの][]] [内容]」をメイン画面の起動中パネルのログテキストへ改行して挿入する
	終わり
終わり