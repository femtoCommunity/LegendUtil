言語管理器とは
	単一種類
	
	+言語データ:辞書
	+言語辞書:辞書
	+言語一覧:配列
	
	はじめの手順
		
	終わり
	
	自分で初回読み込みする手順
		言語辞書=空の辞書
		
		例外監視
			【言語リスト:配列】=[[「language_list.json」を素材リストから文字列として取得したもの]をJSON形式として読み取ったもの]
		発生した場合
			// 言語リストの読み込みに失敗した場合、ダイアログを表示してアプリを終了する
			「言語リストの読み込みに失敗」を「エラー」としてデバッグログへ出力する
			「[エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			「言語リストの読み込みに失敗しました。[改行]開発者へこの問題を報告してください。[改行][改行]Failed to load language list.[改行]Please report this issue to the developer.[改行][改行][エラーのメッセージ]」を「中止アイコン」で表示する
			アプリを終了する
		監視終わり
		
		言語リストを【言語】へそれぞれ繰り返す
			例外監視
				言語辞書(言語)=[「[言語].json」を素材リストから文字列として取得したもの]をJSON形式として読み取ったもの
				// コンフィグの選択肢に言語リストの言語を追加する
				コンフィグ管理器のコンフィグ初期値(「UI_General」)(「Language」)(「一覧」)([言語辞書(言語)(「__Info」)(「Name」)])=言語
			発生した場合
				「言語ファイルの読み込みに失敗: [言語]」を「エラー」としてデバッグログへ出力する
				「[エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			監視終わり
		繰り返し終わり
		
		// Discord RPC の言語一覧をUIの言語一覧にする
		コンフィグ管理器のコンフィグ初期値(「Discord_RPC」)(「Language」)(「一覧」)=コンフィグ管理器のコンフィグ初期値(「UI_General」)(「Language」)(「一覧」)
		
		言語データ=言語辞書(「en」)
		言語一覧=言語辞書の見出し
	終わり
	
	自分で【言語コード:文字列】を読み込む手順
		例外監視
			// 存在しない言語コードが指定されている場合は強制的に日本語へ変更する
			もし言語辞書に言語コードが存在しないなら
				言語コード=「ja」
			もし終わり
			言語データ=言語辞書(言語コード)
			「言語データ読み込み: [言語コード]」をデバッグログへ出力する
		発生した場合
			エラーのメッセージを「エラー」としてデバッグログへ出力する
			「言語データの読み込みに失敗しました。[改行]Failed to load language data.[改行][改行][エラーのメッセージ]」を「中止アイコン」で表示する
			アプリを終了する
		監視終わり
	終わり
	
	自分に【キー:文字列】が存在する手順:真偽値
		もし言語データが無なら×を返す
		【キー一覧:配列】=キーを「.」で区切ったもの
		もし言語データにキー一覧(1)が存在しないなら×を返す
		もし言語データ(キー一覧(1))にキー一覧(2)が存在しないなら×を返す
		もし言語データ(キー一覧(1))(キー一覧(2))にキー一覧(3)が存在しないなら×を返す
		○を返す
	終わり

	自分で【キー:文字列】を〈【リソース:配列】として〉〈【言語:文字列】から〉取得する手順:文字列
		例外監視
			もし言語が無なら言語=[メイン設定について「UI_General」から「Language」を取得したもの]
			【キー一覧:配列】=キーを「.」で区切ったもの // ウィンドウ名.数字.数字
			//「言語データキー: [キー一覧(1)].[キー一覧(2)].[キー一覧(3)]」をデバッグログへ出力する
			【データ:文字列】=言語辞書(言語)(キー一覧(1))(キー一覧(2))(キー一覧(3))
			//「言語データ値: [データ]」をデバッグログへ出力する
			【データ値:文字列】
			もしリソースが無でないならデータ値=データをリソースで埋めたもの
			そうでなければデータ値=データ
			データ値を返す
		発生した場合
			「言語データの取得に失敗 - キー: [キー] | リソース: [リソース]」を「エラー」としてデバッグログへ出力する
			[エラーのメッセージ]をデバッグログへ出力する
			「-----」を返す
		監視終わり
	終わり
終わり