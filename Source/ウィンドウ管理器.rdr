テーマとは
	-名前値:文字列
	-背景色値1:色情報
	-背景色値2:色情報
	-文字色値1:色情報
	-文字色値2:色情報
	-アイコン色値1:色情報
	-アイコン色値2:色情報
	-タイトルバーモード値:整数 // 0=ライト,1=ダーク
	
	はじめ(名前値,背景色値1,背景色値2,文字色値1,文字色値2,アイコン色値1,アイコン色値2,タイトルバーモード値)の手順
		自分の名前値=名前値
		自分の背景色値1=背景色値1
		自分の背景色値2=背景色値2
		自分の文字色値1=文字色値1
		自分の文字色値2=文字色値2
		自分のアイコン色値1=アイコン色値1
		自分のアイコン色値2=アイコン色値2
		自分のタイトルバーモード値=タイトルバーモード値
	終わり
	
	名前という属性
		取得する手順
			自分の名前値を返す
		終わり
	終わり
	
	背景色1という属性
		取得する手順
			自分の背景色値1を返す
		終わり
	終わり
	
	背景色2という属性
		取得する手順
			自分の背景色値2を返す
		終わり
	終わり
	
	文字色1という属性
		取得する手順
			自分の文字色値1を返す
		終わり
	終わり
	
	文字色2という属性
		取得する手順
			自分の文字色値2を返す
		終わり
	終わり
	
	アイコン色1という属性
		取得する手順
			自分のアイコン色値1を返す
		終わり
	終わり
	
	アイコン色2という属性
		取得する手順
			自分のアイコン色値2を返す
		終わり
	終わり
	
	タイトルバーモードという属性
		取得する手順
			自分のタイトルバーモード値を返す
		終わり
	終わり
終わり

ウィンドウ管理器とは
	単一種類
	
	+テーマ背景色
	+テーマ文字色
	+テーマアイコン色
	-テーマ部品固有色
	+部品一覧
	+テーマ一覧:テーマの配列
	+テーマ項目一覧:辞書
	+説明ツールチップ:ツールチップ
	
	はじめの手順
		テーマ背景色=テーマ背景色という色情報を作ったもの
		テーマ文字色=テーマ文字色という色情報を作ったもの
		テーマアイコン色=RGB(255,255,255)
		テーマ部品固有色=○
		部品一覧=空の辞書
		
		【ダーク色】={255,25,25,25}
		【ダーク色2】={255,40,40,40}
		【ライト色】={255,250,250,250}
		【ライト色2】={255,235,235,235}
		
		/*テーマ一覧={ // 背景,文字,アイコン (ARGB),タイトルバーモード (0=ライト,1=ダーク)
			「Dark」={ダーク色,ライト色,ライト色,1},
			「Light」={ライト色,ダーク色,ダーク色,0},
			「SkyBlue」={{255,0,140,225},{255,255,255,255},{255,250,250,250},0},
			「HyperPop」={{255,224,53,118},{255,255,255,255},{255,250,250,250},0},
			「Trick or Treat」={{255,64,0,128},{255,255,128,0},{255,250,250,250},1}
		}*/
		
		テーマ一覧={
			テーマ(「Dark」,ダーク色,ダーク色2,ライト色,ライト色2,ライト色,ライト色2,1)を作ったもの, // 背景1,背景2,文字1,文字2,アイコン1,アイコン2,タイトルバーモード
			テーマ(「Light」,ライト色,ライト色2,ダーク色,ダーク色2,ダーク色,ダーク色2,0)を作ったもの
		}
		
		テーマ項目一覧=空の辞書
		テーマ一覧を【要素】へそれぞれ繰り返す
			テーマ項目一覧(要素の名前)=要素の名前
		繰り返し終わり
		
		テーマ名=テーマ一覧(1)の名前
		
		初期化状態=空の辞書
		
		// ツールチップの設定
		説明ツールチップというツールチップを作る
			その待機時間=0.1
			その表示時間=120000
	終わり
	
	-テーマデータ:テーマ
	-テーマ名データ:文字列
	テーマ名という属性
		設定する手順
			【対象】=設定値をテーマ取得したもの
			テーマデータ=対象
			テーマ名データ=設定値
			テーマ背景色=対象の背景色1
			テーマ文字色=対象の文字色1
			テーマアイコン色=対象のアイコン色1
		終わり
		取得する手順
			テーマ名データを返す
		終わり
	終わり
	
	【名前:文字列】をテーマ取得する手順:テーマ
		自分のテーマ一覧を【要素】へそれぞれ繰り返す
			要素の名前が名前なら要素を返す
		そして
		「テーマ取得エラー: [名前]」を「エラー」としてデバッグログへ出力する
		自分のテーマ一覧(1)を返す
	終わり
	
	【アイコン名:文字列】を〈【アイコン色:色情報】で〉アイコン取得する手順:画像
		【色:色情報】
		もしアイコン色が無でないなら色=アイコン色
		そうでなければ色=テーマ文字色
		
		【フィルター:RGBフィルタ】というRGBフィルタを作る
			その赤=色の赤
			その緑=色の緑
			その青=色の青
		
		[「[アイコン名].png」を素材リストから画像として取得したもの]にフィルターを適用したものを返す
	終わり
	
	【部品】から親部品数取得する手順:整数
		【対象】=部品
		【親部品数:整数】=0
		繰り返す
			例外監視
				【親】=対象の親
				もし親が無なら繰り返しから抜け出す
				親部品数=親部品数+1
				対象=親
			発生した場合
				繰り返しから抜け出す
			監視終わり
		繰り返し終わり
		親部品数を返す
	終わり
	
	【部品】から子部品取得する手順:配列
		エラーを無視する
		【子部品】
		【子子部品】
		【一覧】=空の配列
		
		もし部品が分割パネルであるなら
			部品の右側の子部品一覧を子部品へそれぞれ繰り返す
				子部品から子部品取得したものを子子部品へそれぞれ繰り返す
					一覧へ子子部品を追加する
				繰り返し終わり
			繰り返し終わり
			部品の左側の子部品一覧を子部品へそれぞれ繰り返す
				子部品から子部品取得したものを子子部品へそれぞれ繰り返す
					一覧へ子子部品を追加する
				繰り返し終わり
			繰り返し終わり
		もし終わり
		部品の子部品一覧を子部品へそれぞれ繰り返す
			子部品から子部品取得したものを子子部品へそれぞれ繰り返す
				一覧へ子子部品を追加する
			繰り返し終わり
		繰り返し終わり
		一覧へ部品を追加する
		
		一覧を返す
	終わり
	
	【部品】へツールチップ適用する手順
		// 言語データからツールチップの内容を取得
		もし言語管理器の言語データに「Tooltip」が存在しないなら手順から抜け出す
		もし言語管理器の言語データ(「Tooltip」)に「[部品]」が存在するなら
			// ツールチップを適用
			言語管理器の言語データ(「Tooltip」)(「[部品]」)の見出しを【部品名】へそれぞれ繰り返す
				例外監視
					「部品の[部品名]へ[「][「][言語管理器の言語データ(「Tooltip」)(「[部品]」)(部品名)][」][」]という説明ツールチップを設定する」を命令する
				発生した場合
					「- ツールチップ適用エラー: [部品名]」をデバッグログへ出力する
					「- [エラーのメッセージ]」をデバッグログへ出力する
				監視終わり
			繰り返し終わり
		もし終わり
	終わり
	
	【画面:ウィンドウ】を〈【例外部品一覧:配列】で〉デザイン適用手順
		もし画面が無なら
			手順から抜け出す
		もし終わり
		
		デザイン適用処理中=○
		
		「テーマ名: [テーマ名]」をデバッグログへ出力する
		
		もし例外部品一覧が無なら例外部品一覧=空の配列
		
		【例外部品辞書:辞書】=空の辞書
		例外部品一覧を【例外部品】へそれぞれ繰り返す
			もし例外部品が「;」で終わるなら例外部品辞書へ[例外部品を「;」で区切ったもの(1)]として[例外部品を「;」で区切ったもの(2)]を設定する
			そうでなければ例外部品辞書へ[例外部品]として「」を設定する
		繰り返し終わり
		
		もし画面の内容がアプリの名前を含まないなら
			画面の内容=画面の内容&「 - 」&アプリの名前
		もし終わり
		
		【部品名:文字列】
		【部品フォント:フォント】
		【背景色:配列】
		【背景色変更:真偽値】=×
		【親部品数:整数】=部品から親部品数取得したもの
		部品一覧(「[画面]」)を【部品】へそれぞれ繰り返す
			もし部品がウィンドウであるなら部品名=「[部品]」
			そうでなければ部品名=部品の名前
			
			例外監視
				// 対象の部品のマウスカーソルを変更する
				もし(部品が選択リストである)または(部品がチェックボックスである)または(部品がボタンである)なら
					部品のマウスカーソル=「手」
				もし終わり
				
				// 文字色の変更
				// 例外部品一覧に1つも部品が指定されていない場合の処理
				もし例外部品辞書の個数が0なら
					部品の文字色=テーマデータの文字色1
					背景色変更=○
					
				そうでなければ
					// 例外部品に指定されている部品の処理
					もし例外部品辞書の見出しから[部品名]を完全一致で探したものの個数が1以上なら
						例外部品辞書(部品名)について分岐
						「背景色」の場合 // 背景色が例外として指定されている場合、文字色だけ変える
							もしテーマ部品固有色が「×」なら部品の文字色=テーマデータの文字色1
							
						「全て」の場合 // 背景色と文字色の両方が指定されている場合、どちらも変えない
							
							
						その他の場合 // それ以外(何も指定されていない)の場合
							もしテーマ部品固有色が「×」なら部品の文字色=テーマデータの文字色1
							背景色変更=○
							
						分岐終わり
						
					// 例外部品に指定されていない部品の処理
					そうでなければ
						部品の文字色=テーマデータの文字色1
						背景色変更=○
						
					もし終わり
					
				もし終わり
				//背景色=色変換器でテーマ背景色からHSV生成したもの。背景色(3)=背景色(3)-([ウィンドウ管理器:部品から親部品数取得したもの]/10)
				//背景色=色変換器でテーマ背景色からHSV生成したもの
				//背景色=HSV(背景色(1),背景色(2),背景色(3))
				
				// 背景色の変更
				背景色変更なら
					// 特定の部品はサブカラーにする
					//(部品がボタンであるかつ部品の内容が無でない)または(部品がテキストであるかつ部品の元実体の「BorderStyle」「なし」でない)または(部品がテキスト領域である)または(部品が選択リストである)または(部品がフレームである)なら
					//	部品の背景色=テーマデータの背景色2
						
					//そうでなければ
						部品の背景色=テーマデータの背景色1
						
					//そして
				そして
			発生した場合
				「テーマデザイン適用エラー: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			監視終わり
			
			例外監視
				部品がウィンドウであるなら繰り返しを続ける
				//部品の幅=部品の幅*アプリのDPI係数
				//部品の高さ=部品の高さ*アプリのDPI係数
			発生した場合
				「設計スケール比率適用エラー: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
			監視終わり
		繰り返し終わり
		
		例外監視
			もし[画面のアイコン一覧の個数]が1以上なら
				【テーマアイコン色】=テーマデータの文字色1
				【仮テーマアイコン色】
				【背景】=「」
				//デバッグログへ「　アイコン一覧: [画面のアイコン一覧]」を出力する
				画面のアイコン一覧の見出しをアイコン部品へそれぞれ繰り返す
					//デバッグログへ「　アイコンデザイン適用: [アイコン部品]」を出力する
					「部品=画面の[アイコン部品]」を命令する
					// 部品がコンテキストメニューの項目の場合、背景が白なのでアイコンの色を黒にする
					もし[画面のアイコン一覧([アイコン部品])(2)]が無でないならテーマアイコン色=画面のアイコン一覧([アイコン部品])(2)
					そうでなければテーマアイコン色=テーマデータの文字色1
					
					もし部品がメニュー項目であるなら
						仮テーマアイコン色=テーマアイコン色
						テーマアイコン色=RGB(255,255,255)
					もし終わり
					
					もし[画面のアイコン一覧([アイコン部品])(2)]が無でないならテーマアイコン色=[画面のアイコン一覧([アイコン部品])(2)]
					もし[画面のアイコン一覧([アイコン部品])(3)]が○なら
						部品の背景画像=[ウィンドウ管理器:「[画面のアイコン一覧([アイコン部品])(1)]」をテーマアイコン色でアイコン取得したもの]
						部品の背景画像配置=「拡大」
						
					そうでなければ
						部品の画像=[ウィンドウ管理器:「[画面のアイコン一覧([アイコン部品])(1)]」をテーマアイコン色でアイコン取得したもの]
						
					もし終わり
					
					// アイコン色を戻す
					もし部品がメニュー項目であるなら
						テーマアイコン色=仮テーマアイコン色
					もし終わり
				繰り返し終わり
			もし終わり
		発生した場合
			「テーマアイコン適用エラー: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
		監視終わり
		
		// テーマに応じてタイトルバーをダークモードにする
		例外監視
			もしテーマデータのタイトルバーモードが1なら
				「タイトルバーダークモード適用: [自分]」をデバッグログへ出力する
				Wind:[画面のハンドル]へダークタイトルバー適用する
			もし終わり
		発生した場合
			「テーマタイトルバーモード適用エラー: [エラーのメッセージ]」を「エラー」としてデバッグログへ出力する
		監視終わり
		
		デザイン適用処理中=×
	終わり
	
	-初期化状態:辞書
	自分で【部品】を初期化開始する手順
		もし初期化状態に「[部品のハンドル]」が存在しないなら初期化状態(「[部品のハンドル]」)=×
		//「初期化開始: [部品] (名前: [部品の名前] | ハンドル: [部品のハンドル])」をデバッグログへ出力する
		もし初期化状態(「[部品のハンドル]」)が○でないなら
			//「- 実行」をデバッグログへ出力する
			初期化状態(「[部品のハンドル]」)=○
			部品をウィンドウ部品制御で初期化開始する
		もし終わり
	終わり
	
	自分で【部品】を初期化終了する手順
		もし初期化状態に「[部品のハンドル]」が存在しないなら初期化状態(「[部品のハンドル]」)=×
		//「初期化終了: [部品] (名前: [部品の名前] | ハンドル: [部品のハンドル])」をデバッグログへ出力する
		//「- 実行」をデバッグログへ出力する
		初期化状態(「[部品のハンドル]」)=×
		部品をウィンドウ部品制御で初期化終了する
	終わり
終わり
