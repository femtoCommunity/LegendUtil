※コンソール

「rdrArchiveHelper.dll」を利用する


// 定数
APIURL=「https://api-legendutil.ezolys.com/releases」
プロデルURL=「https://produ.irelang.jp/downloads/」
一時フォルダーパス=「[今の位置]Temp_[GUID値を生成したもの]\」

// 変数
オプション={
	「DisablePushToRepo」=×,
	「DisableRegisterToAPI」=×
}


起動時設定解析する
処理開始する

起動時設定解析する手順
	例外監視
		プログラムの起動時設定が無なら手順から抜ける

		【起動時設定】
		【起動時設定2】
		【起動時設定名】
		【カウント】=1

		プログラムの起動時設定の個数回、カウントへカウントしながら繰り返す
			起動時設定=プログラムの起動時設定(カウント)
			起動時設定が「/」で始まるなら
				起動時設定名=起動時設定の先頭から1文字消したもの
				オプションに起動時設定名が存在するなら
					// 引数の値が指定されているかチェック
					起動時設定2=無
					プログラムの起動時設定の個数が(カウント+1)以上なら
						起動時設定2=プログラムの起動時設定(カウント+1)
						起動時設定2が「/」で始まるなら
							起動時設定2=無
						そして
					そして
					// 真偽値
					オプション(起動時設定名)の種類名について分岐
					「真偽値」の場合
						オプション(起動時設定名)=○
					// 文字列
					「文字列」の場合
						起動時設定2が無でないなら
							オプション(起動時設定名)=起動時設定2
						そして
					// 配列
					「可変長配列」の場合
						起動時設定2が無でないなら
							オプション(起動時設定名)=起動時設定2を配列化したもの
						そして
					そして
				そして
			そして
		そして
		「」をコンソールへ表示して改行する
	発生した場合
		「」をコンソールへ表示して改行する
		「========================================」をコンソールへ表示して改行する
		「起動引数の解析に失敗しました。[改行][改行][エラーのメッセージ]」をコンソールへ表示して改行する
		「========================================」をコンソールへ表示して改行する
		「」をコンソールへ表示して改行する
	監視終わり
終わり

処理開始する手順
	例外監視
		// 一時フォルダーを作成
		一時フォルダー=[今の位置]へ[一時フォルダーパスのフォルダだけ]というフォルダを作成する

		// ソースフォルダー branch
		ソースフォルダー=フォルダ情報([「GITHUB_WORKSPACE」の環境変数]&「\Source」)を作ったもの

		// リリースフォルダー releases/nightly
		リリースフォルダー=フォルダ情報([「GITHUB_WORKSPACE」の環境変数]&「\Releases」)を作ったもの

		// ビルド用一時フォルダー
		ビルドフォルダー=[今の位置]へ「BuildTemp」というフォルダを作成する

		// ビルド成果フォルダーを作成
		成果フォルダー=[今の位置]へ「Build」というフォルダを作成する

		「フォルダー情報」をコンソールへ表示して改行する
		「- 　一時フォルダー: [一時フォルダー]」をコンソールへ表示して改行する
		「- ソースフォルダー: [ソースフォルダー]」をコンソールへ表示して改行する
		「- ビルドフォルダー: [ビルドフォルダー]」をコンソールへ表示して改行する
		「- 　成果フォルダー: [成果フォルダー]」をコンソールへ表示して改行する
		「」をコンソールへ表示して改行する

		// ビルド用一時フォルダーへソースをコピーする
		「ソースをコピー」をコンソールへ表示して改行する
		[「[ソースフォルダー]」のフォルダの一覧]を【ソース子フォルダー】へそれぞれ繰り返す
			「- [ソース子フォルダー]」をコンソールへ表示して改行する
			[ソース子フォルダー]が「.git」で終わるなら繰り返しを続ける // Git のフォルダーは無視する
			「[ソースフォルダー]\」&[ソース子フォルダー]を[ビルドフォルダー]&[ソース子フォルダー]へコピーする
		そして
		[フルパスで「[ソースフォルダー]」のファイルの一覧]を【ソース子ファイル】へそれぞれ繰り返す
			「- [ソース子ファイル]」をコンソールへ表示して改行する
			[ソース子ファイル]を[ビルドフォルダー]へコピーする
		そして

		// 現在のコミットのハッシュを取得する
		コミットハッシュ=[「cd "[ソースフォルダー]" & git show --format='%h' --no-patch」をコマンド実行したもの]で「'」から「'」まで抽出したもの(1)
		コミットハッシュを「[ビルドフォルダー]CommitHash.txt」へ「UTF-8」で保存する

		// コミット情報を取得する
		「cd "[ソースフォルダー]" & git show --no-patch --notes --date=iso > "[ビルドフォルダー]CommitInfo.txt"」をコマンド実行する
		コミット情報=「[ビルドフォルダー]CommitInfo.txt」から「UTF-8」で読み込んだもの

		// Build.json の編集
		「ビルド情報を編集」をコンソールへ表示して改行する
		ビルド情報=[「[ビルドフォルダー]Build.json」から「UTF-8」で読み込んだもの]をJSON形式として読み取ったもの
		ビルド情報(「App」)(「ReleaseChannel」)=「nightly」
		[ビルド情報をJSON形式として書き出したもの]を「[ビルドフォルダー]Build.json」へ「UTF-8」で保存する

		// バージョン情報の編集
		プロジェクトファイル=XMLで[「[ビルドフォルダー]LegendUtil.rdrproj」から「UTF-8」で読み込んだもの]から作成したもの
		アプリ名=「[プロジェクトファイルの「プロジェクト」の「名前」の内容]」
		[プロジェクトファイルから「プロジェクト」を取得したもの]を【要素】へそれぞれ繰り返す
			バージョン配列=要素の「バージョン」の「値」の内容を「.」で区切ったもの
			ビルドバージョン=「[今を「yyyyMMdd.HHmmss」に整えたもの]」&「.4」 // 4=Nightly
			バージョン=「[バージョン配列(1)].[バージョン配列(2)].[バージョン配列(3)]」
			バージョン配列(2)=バージョン配列(2)を2桁に整えたもの
			バージョン配列(3)=バージョン配列(3)を2桁に整えたもの
			内部バージョン番号=「[バージョン配列(1)][バージョン配列(2)][バージョン配列(3)]」
			アイコンパス=要素の「リソース」の要素一覧(1)の「値」の内容
		繰り返し終わり
		内部バージョン=「[内部バージョン番号].[ビルドバージョンで「.」を「」へ置換したもの]」

		// 実行ファイルのアイコンを変更
		プロジェクトファイルの「プロジェクト」の「リソース」の「項目」の「値」の内容=「Resources\Logo\LegendUtil_Nightly_Icon.ico」

		// プロジェクトファイルの変更を保存
		プロジェクトファイルを「[ビルドフォルダー]LegendUtil.rdrproj」へ保存する

		// ビルドバージョンをファイルへ保存
		[ビルドバージョン]を「[ビルドフォルダー]BuildVersion.txt」へ「UTF-8」で保存する
		「」をコンソールへ表示して改行する

		//「[今の位置]_Pack\[ソースファイルの名前だけ]_Setup.exe」を「[リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe」へコピーする

		// ソースコードをコンパイル
		「ソースコードをコンパイル」をコンソールへ表示して改行する
		[「[今の位置]rdr\rdrc.exe [ビルドフォルダー]LegendUtil.rdrproj」をコマンド実行したもの]をコンソールへ表示して改行する

		// 生成されたファイルを移動
		「[ビルドフォルダー]_Pack\LegendUtil\LegendUtil.exe」が存在するなら「[ビルドフォルダー]_Pack\LegendUtil\LegendUtil.exe」を削除する
		「[ビルドフォルダー]LegendUtil.exe」を「[ビルドフォルダー]_Pack\LegendUtil\LegendUtil.exe」へ移動する

		「[ビルドフォルダー]_Pack\LegendUtil\*.dll」を削除する
		「[ビルドフォルダー]*.dll」を「[ビルドフォルダー]_Pack\LegendUtil」へ移動する
		「」をコンソールへ表示して改行する

		// 成果物を圧縮
		「成果物を圧縮」をコンソールへ表示して改行する
		「[成果フォルダー]LegendUtil_v*-nightly.*.zip」を削除する // 既存のビルドが存在する場合はすべて削除する
		「[成果フォルダー]LegendUtil_v[バージョン]-nightly.[コミットハッシュ].zip」が存在するなら「[成果フォルダー]LegendUtil_v[バージョン]-nightly.[コミットハッシュ].zip」を削除する
		「[ビルドフォルダー]_Pack\LegendUtil\」を「[成果フォルダー]LegendUtil_v[バージョン]-nightly.[コミットハッシュ].zip」へ圧縮する
		「」をコンソールへ表示して改行する

		// 成果物をプッシュ
		オプション(「DisablePushToRepo」)でないなら
			「成果物をリポジトリーへプッシュ」をコンソールへ表示して改行する
			コマンド一覧={
				「cd "[リリースフォルダー]"」,
				「git checkout releases/nightly」,
				「git add "[リリースフォルダー]Pack\LegendUtil_nightly_latest.zip"」,
				「git commit -m "Version [バージョン]-nightly.[コミットハッシュ]"」,
				「git push origin releases/nightly」
			}

			「[成果フォルダー]LegendUtil_v[バージョン]-nightly.[コミットハッシュ].zip」を「[リリースフォルダー]Pack\LegendUtil_nightly_latest.zip」へコピーする

			[コマンド一覧を「 & 」で繋げたもの]をコマンド実行したものをコンソールへ表示して改行する
			「」をコンソールへ表示して改行する
		そして

		// Releases API へ最新のビルドを登録
		オプション(「DisableRegisterToAPI」)でないなら
			「ビルドをAPIへ登録」をコンソールへ表示して改行する
			登録要求=HTTP要求を作ったもの
			登録要求のメソッド=「POST」
			登録要求のContentType=「application/json」
			登録要求のヘッダ={「Api-Key」=「LEGENDUTIL_API_KEY」の環境変数}
			登録要求の文字コード=「UTF-8」
			登録要求の本文={
				「version」=[バージョン],
				「internal_version」=[内部バージョン],
				「release_channel」=「nightly」,
				「build_version」=「.[コミットハッシュ]」,
				「installer_download_url」=「https://github.com/femtoCommunity/LegendUtil/raw/releases/nightly/Setup/LegendUtil_Setup.exe」,
				「installer_file_name」=「LegendUtil_Setup.exe」,
				「changelog」=[コミット情報]
			}をJSON形式として書き出したもの

			登録応答=APIURL&「/register/latest?release_channel=nightly」を登録要求にてHTTPで要求したもの

			登録応答のステータスコード番号が200なら
				「- ビルド登録成功: [登録応答のステータスコード]」をコンソールへ表示して改行する

			そうでなければ
				「- ビルド登録失敗: [登録応答のステータスコード]」をコンソールへ表示して改行する
				「ビルド登録失敗: [登録応答のステータスコード]」というエラーを発生させる

			そして

			「[登録応答の本文]」をコンソールへ表示して改行する

			「」をコンソールへ表示して改行する
		そして

		// 一時フォルダーを削除
		一時フォルダーパスというフォルダが存在するなら一時フォルダーパスというフォルダを削除する
		[ビルドフォルダーの絶対パス]というフォルダが存在するなら[ビルドフォルダーの絶対パス]というフォルダを削除する

		「処理終了」をコンソールへ表示して改行する
		「」をコンソールへ表示して改行する
		0で終了する
	発生した場合
		一時フォルダーパスというフォルダが存在するなら一時フォルダーパスというフォルダを削除する
		「=======================================」をコンソールへ表示して改行する
		「処理に失敗しました。[改行][改行][エラーのメッセージ]」をコンソールへ表示して改行する
		「======================================」をコンソールへ表示して改行する
		1で終了する
	監視終わり
終わり
