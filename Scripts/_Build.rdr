※コンソール
「rdrConsoleProcessPlugin.dll」を利用する

「..\Source\アプリ.rdr」を参照する
「..\Source\ライセンス.rdr」を参照する
「..\Source\プロファイル管理器.rdr」を参照する


プログラムのタイトル=「LegendUtil Builder」
スクリプトバージョン={3,0}

作業ディレクトリー=今の位置の親

ビルド日時=「[今を「yyyyMMdd.HHmmss」に整えたもの]」

// ビルド情報を読み込む
ビルド情報=[「[作業ディレクトリー]Build.json」から「UTF-8」で読み込んだもの]をJSON形式として読み取ったもの

// 変数
ソースファイル=「[作業ディレクトリー]LegendUtil.rdrproj」
ソースコードコンパイル試行数=0
インストーラーコンパイル試行数=0

ビルド番号=0

アップロードフォルダー=「」

リリースチャンネル一覧={
	「0」=「release」,
	「1」=「beta」,
	「2」=「dev」,
	「3」=「dev_stable」,
	「4」=「nightly」
}

「[プログラムのタイトル]」をコンソールへ表示して改行する
「v[スクリプトバージョンを「.」で繋げたもの]」をコンソールへ表示して改行する
「」をコンソールへ表示して改行する
「作業ディレクトリー: [作業ディレクトリー]」をコンソールへ表示して改行する
「」をコンソールへ表示して改行する

コンフィグ値={
	「Main」={
		「ProduireCompiler_Path」=「」,
		「InstallerCompiler_Path」=「」,
		「Dev_Build_Releases_Brunch_Folder」=「」,
		「API_URL」=「」,
		「API_Key」=「」
	}
}
コンフィグ値でコンフィグチェックする

ビルドする
終了する

【内容】をコンソール出力する手順
	「[[][今を「yyyy/MM/dd HH:mm:ss」に整えたもの][]] [内容]」をコンソールへ表示して改行する
終わり

【ファイル名:文字列】を〈【引数:文字列】として〉コンソールプロセス起動する手順:整数
	引数が無なら引数=「」
	
	【対象プロセス】=[ファイル名]を[引数]でコンソールプロセスとして起動したもの
	
	【対象プロセス標準出力スレッド】=スレッドを作ったもの
		そのバックグラウンド=○
		それで『
			対象プロセスの標準出力受信した時の手順は、『「「[INFO] 」」&[この時のデータ]をコンソール出力する』
		』を実行する
	【対象プロセスエラー出力スレッド】=スレッドを作ったもの
		そのバックグラウンド=○
		それで『
			対象プロセスのエラー出力受信した時の手順は、『「「[ERROR] 」」&[この時のデータ]をコンソール出力する』
		』を実行する
	
	対象プロセスを待つ
	対象プロセスのプロセスの終了コードを返す
終わり

【初期値】でコンフィグチェックする手順
	メイン設定という設定ファイルを作る
	メイン設定のファイル名=「[作業ディレクトリー]BuilderConfig.ini」
	メイン設定について「Info」で「CreatedDate」へ「[今]」を設定する
	
	初期値の見出しを【コンフィグ親キー】へそれぞれ繰り返す
		初期値(コンフィグ親キー)の見出しを【コンフィグキー】へそれぞれ繰り返す
			もし[メイン設定についてコンフィグ親キーからコンフィグキーを取得したもの]が空ならメイン設定についてコンフィグ親キーでコンフィグキーへ[初期値(コンフィグ親キー)(コンフィグキー)]を設定する
		繰り返し終わり
	繰り返し終わり
終わり

ビルドする手順
	「ビルド開始[改行]」をコンソール出力する
	
	// 現在のコミットのハッシュを取得する
	コミットハッシュ=[「cd "[作業ディレクトリー]" & git show --format='%h' --no-patch」をコマンド実行したもの]で「'」から「'」まで抽出したもの(1)
	コミットハッシュを「[作業ディレクトリー]CommitHash.txt」へ「UTF-8」で保存する
	「コミットハッシュ: [コミットハッシュ][改行]」をコンソール出力する
	
	プロジェクトファイル=XMLで[「[作業ディレクトリー]LegendUtil.rdrproj」から「UTF-8」で読み込んだもの]から作成したもの
	//[プロジェクトファイルから「プロジェクト」を取得したもの]を【要素】へそれぞれ繰り返す
	//	アイコンパス=要素の「リソース」の要素一覧(1)の「値」の内容
	//繰り返し終わり
	
	【リリースチャンネル一覧文字列】=「」
	リリースチャンネル一覧の見出しを【リリースチャンネル番号】へそれぞれ繰り返す
		リリースチャンネル一覧文字列=リリースチャンネル一覧文字列&「 [リリースチャンネル番号]: [リリースチャンネル一覧(リリースチャンネル番号)][改行]」 
	繰り返し終わり
	
	「リリースチャンネルを選択してください[改行][リリースチャンネル一覧文字列]選択肢: 」をコンソールへ表示する
	リリースチャンネル番号=コンソールから受け取ったもの
	もしリリースチャンネル番号がリリースチャンネル一覧に存在しないなら
		リリースチャンネル番号=「0」
	もし終わり
	【リリースチャンネル】=リリースチャンネル一覧(リリースチャンネル番号)
	
	// Build.json の読み込み
	「ビルド情報を編集」をコンソール出力する
	ビルド情報(「App」)(「ReleaseChannel」)=「[リリースチャンネル]」
	
	アプリ名=「[アプリの名前]」
	
	// 初期アイコンパスを設定する
	プロジェクトファイルの「プロジェクト」の「リソース」の「項目」の「値」の内容=「Resources\Logo\LegendUtil_Icon.ico」
	
	もしリリースチャンネルが「beta」なら // Beta
		ビルド日時=ビルド日時&「.1」
		ビルド情報(「App」)(「ReleaseChannel」)=「beta」
		ビルド番号=「[アプリのリリース番号]」
		インストーラーソースファイル=「[作業ディレクトリー]Source\_Setup\LegendUtil_Setup.iss」
		
	他でもしリリースチャンネルが「dev」で始まるなら // Dev
		アプリ名=「[アプリの名前] Dev Build」
		インストーラーソースファイル=「[作業ディレクトリー]Source\_Setup\LegendUtil_Setup_Dev.iss」
		プロジェクトファイルの「プロジェクト」の「リソース」の「項目」の「値」の内容=「Resources\Logo\LegendUtil_Dev_Icon.ico」
		
		もしリリースチャンネルが「_stable」で終わるなら
			アプリ名=「[アプリの名前] Dev Build」
			ビルド日時=ビルド日時&「.3」
			ビルド情報(「App」)(「ReleaseChannel」)=「dev_stable」
			アップロードフォルダー=「/Stable」
			リリース先親フォルダー=「[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]\Pack\Stable\」
			
		そうでなければ
			ビルド日時=ビルド日時&「.2」
			ビルド情報(「App」)(「ReleaseChannel」)=「dev」
			アップロードフォルダー=「」
			リリース先親フォルダー=「[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]\Pack\」
			
		もし終わり
		ビルド番号=「[ビルド日時]」
		
	他でもしリリースチャンネルが「nightly」で始まるなら
		アプリ名=「[アプリの名前] Nightly Build」
		ビルド日時=ビルド日時&「.4」
		ビルド情報(「App」)(「ReleaseChannel」)=「nightly」
		インストーラーソースファイル=「[作業ディレクトリー]Source\_Setup\LegendUtil_Setup_Nightly.iss」
		プロジェクトファイルの「プロジェクト」の「リソース」の「項目」の「値」の内容=「Resources\Logo\LegendUtil_Nightly_Icon.ico」
		
	そうでなければ // Release とかその他
		ビルド日時=ビルド日時&「.0」
		ビルド番号=「」
		インストーラーソースファイル=「[作業ディレクトリー]Source\_Setup\LegendUtil_Setup.iss」
		
	もし終わり
	もし(ビルド番号が「.」で始まらない)かつ(ビルド番号が無でない)ならビルド番号=「.」&ビルド番号
	ビルド日時を「[作業ディレクトリー]BuildVersion.txt」へ「UTF-8」で保存する
	
	プロジェクトファイルを「[作業ディレクトリー]LegendUtil.rdrproj」へ保存する
	
	// Build.json の保存
	[ビルド情報をJSON形式として書き出したもの]を「[作業ディレクトリー]Build.json」へ「UTF-8」で保存する
	アプリ:[[「[作業ディレクトリー]Build.json」から「UTF-8」で読み込んだもの]をJSON形式として読み取ったもの]で情報設定する
	
	「リリースチャンネル: [アプリのリリースチャンネル]」をコンソール出力する
	
	//インストーラーのバージョン情報を更新
	「インストーラーのバージョン情報を更新」をコンソール出力する
	変数一覧={
		「MyAppName」=「[アプリ名]」,
		「MyAppVersion」=「[アプリのバージョン]」,
		「MyAppReleaseChannel」=「[アプリのリリースチャンネル]」,
		「MyAppReleaseNumber」=「[アプリのリリース番号]」,
		「MyAppVersionText」=「[アプリのバージョン]-[アプリのリリースチャンネル][ビルド番号]」
	}
	インストーラーソースファイルテキスト=インストーラーソースファイルから読み込んだもの
	変数一覧の見出しを変数名へそれぞれ繰り返す
		インストーラーソースファイルテキスト=インストーラーソースファイルテキストで「#define [変数名] "[インストーラーソースファイルテキストで「#define [変数名] "」から「"」まで抽出したもの(1)]"」を「#define [変数名] "[変数一覧(変数名)]"」へ置き換えたもの
	繰り返し終わり
	インストーラーソースファイルテキストをインストーラーソースファイルへ保存する
	
	ソースファイルをコンパイルする
	
	もし「[作業ディレクトリー]_Pack\[アプリの名前]\[ソースファイルの名前だけ].exe」というファイルが存在するなら
		「実行ファイルを削除 ([作業ディレクトリー]_Pack\[ソースファイルの名前だけ].exe)」をコンソール出力する
		「[作業ディレクトリー]_Pack\[アプリの名前]\[ソースファイルの名前だけ].exe」を削除する
	もし終わり
	「実行ファイルを移動 ([ソースファイルの名前だけ].exe)」をコンソール出力する
	「[作業ディレクトリー][ソースファイルの名前だけ].exe」を「[作業ディレクトリー]_Pack\[アプリの名前]\[ソースファイルの名前だけ].exe」へ移動する
	0.1秒待つ
	インストーラーソースファイルをコンパイルする
	
	「Build Version: [ビルド日時] ([ビルド日時で「.」を「」へ置換したもの])」をコンソール出力する
	[アプリの内部バージョン]をクリップボードへコピーする
	「内部バージョンをクリップボードへコピー」をコンソール出力する
	
	// リリース
	もしアプリのリリースチャンネルが「dev」で始まるなら
		「リリースを行う場合は y を入力してください: 」をコンソールへ表示する
		コンソールから受け取ったものについて分岐
		「y」の場合
			「コミットメッセージを入力: 」をコンソールへ表示する
			【コミットメッセージ】=コンソールから受け取ったもの
			
			コミットメッセージでリリースする
		分岐終わり
	もし終わり
終わり

【ソースファイル】をコンパイル手順
	もしソースファイルの拡張子だけが「rdrproj」なら
		アプリ:情報設定する
		「 [ソースファイル] をコンパイル中」をコンソール出力する
		コンパイラープロセス=「"[メイン設定について「Main」から「ProduireCompiler_Path」を取得したもの]"」を「"[ソースファイル]"」として「裏」で起動したもの
		繰り返す
			もしコンパイラープロセスの起動中が×なら繰り返しから抜け出す
			0.1秒待つ
		繰り返し終わり
		もしコンパイラープロセスの終了コードが0なら
			「- DLLファイルを移動」をコンソール出力する
			「[作業ディレクトリー]_Pack\LegendUtil\*.dll」を削除する
			「[作業ディレクトリー]\*.dll」を「[作業ディレクトリー]_Pack\LegendUtil」へ移動する
			「ソースコードのコンパイル完了 - 戻り値: [コンパイラープロセスの終了コード]」をコンソール出力する
			
		そうでなければ
			もし"ソースコードコンパイル試行回数">3なら
				「ソースコードのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード] ([ソースコードコンパイル試行数]回目)[改行][プログラムのタイトル] を終了します...」をコンソール出力する
				3秒待つ
				終了する
				
			そうでなければ
				「ソースコードのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード][改行]秒後に再試行します...」をコンソール出力する
				1秒待つ
				ソースコードコンパイル試行回数=ソースコードコンパイル試行数+1
				ソースファイルをコンパイルする
				
			もし終わり
		
		もし終わり
	
	他でもしソースファイルの拡張子だけが「iss」なら
		「インストーラーをコンパイル中」をコンソール出力する
		コンパイラープロセス=「"[メイン設定について「Main」から「InstallerCompiler_Path」を取得したもの]"」を「"[ソースファイル]"」として「裏」で起動したもの
		繰り返す
			もしコンパイラープロセスの起動中が×なら繰り返しから抜け出す
			0.1秒待つ
		繰り返し終わり
		もしコンパイラープロセスの終了コードが0なら
			「インストーラーのコンパイル完了 - 戻り値: [コンパイラープロセスの終了コード]」をコンソール出力する
			
		そうでなければ
			もしインストーラーコンパイル試行数>3なら
				「インストーラーのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード] ([インストーラーコンパイル試行数]回目)[改行][プログラムのタイトル] を終了します...」をコンソール出力する
				3秒待つ
				終了する
				
			そうでなければ
				「インストーラーのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード][改行]2秒後に再試行します...」をコンソール出力する
				2秒待つ
				インストーラーコンパイル試行数=インストーラーコンパイル試行数+1
				ソースファイルをコンパイルする
				
			もし終わり
		
		もし終わり
		
	もし終わり
終わり

【リリース情報:辞書】を【APIキー:文字列】として登録する手順:HTTP応答
	【登録要求:HTTP要求】=HTTP要求を作ったもの
	登録要求のメソッド=「POST」
	登録要求のContentType=「application/json」
	登録要求のヘッダ={「Api-Key」=[APIキー]}
	登録要求の文字コード=「UTF-8」
	登録要求の本文=[リリース情報をJSON形式として書き出したもの]
	
	【登録応答:HTTP応答】=[メイン設定について「Main」から「API_URL」を取得したもの]&「/register/latest?release_channel=[リリース情報(「release_channel」)]」を登録要求にてHTTPで要求したもの
	登録応答を返す
終わり

〈【コミットメッセージ:文字列】で〉リリースする手順
	もしコミットメッセージが無ならコミットメッセージ=「」
	
	もし[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]というフォルダが存在しないなら
		「リリース処理失敗: フォルダーが見つかりません。」をコンソール出力する
		手順から抜ける
	もし終わり
	
	【APIKey】=[メイン設定について「Main」から「API_Key」を取得したもの]
	
	【リリースチャンネル】=アプリのリリースチャンネル
	
	リリース先フォルダー=「[リリース先親フォルダー][アプリのバージョン]-[リリースチャンネル][ビルド番号]\」
	
	// 最新のリリース情報を取得する
	【最新リリースJSON】=[メイン設定について「Main」から「API_URL」を取得したもの]&「/latest?release_channel=[リリースチャンネル]」を{「Content-Type」=「application/json」}にてHTTPで取得したもの
	【最新リリース情報】=最新リリースJSONをJSON形式として読み取ったもの(「data」)
	
	もしHTTPのステータスコードが200なら
		「最新リリース」をコンソールへ表示して改行する
		「- バージョン: [最新リリース情報(「version」)]-[最新リリース情報(「release_channel」)][最新リリース情報(「build_version」)]」をコンソールへ表示して改行する
		「- 内部バージョン: [最新リリース情報(「internal_version」)]」をコンソールへ表示して改行する
		「===== 変更履歴 =========================」をコンソールへ表示して改行する
		「[最新リリース情報(「changelog」)]」をコンソールへ表示して改行する
		「========================================」をコンソールへ表示して改行する
		
		【終了コード:整数】
		【実行コマンド:文字列】
		
		// Pull
		「リポジトリーを同期」をコンソール出力する
		「-         ディレクトリー: [メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]」をコンソール出力する
		「- インストーラーファイル: [リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe」をコンソール出力する
		「」をコンソールへ表示して改行する
		
		// コマンドを実行
		実行コマンド=「cd '[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]' | git fetch origin releases/dev | git checkout releases/dev | git branch --contains | git pull origin releases/dev」
		実行コマンドをコンソール出力する
		終了コード=「powershell」を「-c 」&[実行コマンド]としてコンソールプロセス起動する
		
		「」をコンソールへ表示して改行する
		「終了コード: [終了コード]」をコンソール出力する
		
		終了コードが0でないなら
			「リリース処理失敗」をコンソール出力する
			[リリース先フォルダー]というフォルダが存在するなら[リリース先フォルダー]というフォルダを削除する
			手順から抜ける
		そして
		「」をコンソールへ表示して改行する
		
		「リポジトリーへ成果物をプッシュ」をコンソール出力する
		「」をコンソールへ表示して改行する
		
		コマンド一覧={
			「cd '[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]'」,
			「git fetch origin releases/dev」,
			「git checkout releases/dev」,
			「git add '[リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe'」,
			「git commit -m 'Version [アプリのバージョン]-[リリースチャンネル][ビルド番号]' '[リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe'」,
			「git push origin releases/dev」
		}
		
		例外監視
			// フォルダーを作成
			リリース先フォルダーというフォルダが存在しないなら
				「フォルダーを作成: [リリース先フォルダー]」をコンソール出力する
				「[リリース先親フォルダー]」へ「[アプリのバージョン]-[リリースチャンネル][ビルド番号]」というフォルダを作成する
			そして
			// インストーラーをコピー
			「[作業ディレクトリー]_Pack\[ソースファイルの名前だけ]_Setup.exe」を「[リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe」へコピーする
			
			// コマンドを実行
			実行コマンド=[コマンド一覧を「 | 」で繋げたもの]
			実行コマンドをコンソール出力する
			終了コード=「powershell」を「-c 」&[実行コマンド]としてコンソールプロセス起動する
			
			「」をコンソールへ表示して改行する
			「終了コード: [終了コード]」をコンソール出力する
			
			終了コードが0でないなら
				「リリース処理失敗」をコンソール出力する
				[リリース先フォルダー]というフォルダが存在するなら[リリース先フォルダー]というフォルダを削除する
				手順から抜ける
			そして
			
			「完了」をコンソール出力する
		発生した場合
			「リリース処理失敗: [エラーのメッセージ]」をコンソール出力する
			[リリース先フォルダー]というフォルダが存在するなら[リリース先フォルダー]というフォルダを削除する
			手順から抜ける
		監視終わり
		
		// リリース情報を更新する
		「ビルドをAPIへ登録」をコンソールへ表示して改行する
		登録応答={
			「version」=[アプリのバージョン],
			「internal_version」=[アプリの内部バージョン],
			「release_channel」=「[リリースチャンネル]」,
			「build_version」=「[ビルド番号]」,
			「installer_download_url」=「https://github.com/femtoCommunity/LegendUtil/raw/releases/dev/Pack[アップロードフォルダー]/[アプリのバージョン]-[リリースチャンネル][ビルド番号]/[ソースファイルの名前だけ]_Setup.exe」,
			「installer_file_name」=「[ソースファイルの名前だけ]_Setup.exe」,
			「changelog」=[コミットメッセージで[改行]を「\n」へ置換したもの]
		}を[APIKey]として登録する
		
		登録応答のステータスコード番号が200なら
			「- ビルド登録成功: [登録応答のステータスコード]」をコンソールへ表示して改行する

		そうでなければ
			「- ビルド登録失敗: [登録応答のステータスコード]」をコンソールへ表示して改行する
			[リリース先フォルダー]というフォルダが存在するなら[リリース先フォルダー]というフォルダを削除する
			手順から抜ける

		そして

		「[登録応答の本文]」をコンソールへ表示して改行する
		
	そうでなければ
		// 正常に取得できなかった場合はフォルダーを削除する
		「リリース情報取得失敗」をコンソールへ表示して改行する
		「- ステータスコード: [HTTPのステータスコード]」をコンソールへ表示して改行する
		「- 詳細: [最新リリース情報(「detail」)]」をコンソールへ表示して改行する
		[リリース先フォルダー]というフォルダが存在するなら[リリース先フォルダー]というフォルダを削除する
		
	もし終わり
終わり
