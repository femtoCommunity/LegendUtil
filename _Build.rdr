※コンソール

「Source\アプリ.rdr」を参照する
「Source\プロファイル管理器.rdr」を参照する

ビルド日時=「[今を「yyyyMMdd.HHmmss」に整えたもの]」
ビルド日時を「BuildVersion.txt」へ「UTF-8」で保存する

プログラムのタイトル=「[アプリの名前] Builder」
ソースファイル=「[今の位置]LegendUtil.rdrproj」
ソースコードコンパイル試行数=0
インストーラーコンパイル試行数=0

ビルド番号=0

「[プログラムのタイトル]」をコンソールへ表示して改行する

コンフィグ値={
	「Main」={
		「ProduireCompiler_Path」=「」,
		「InstallerCompiler_Path」=「」,
		「Dev_Build_Releases_Brunch_Folder」=「」
	}
}
コンフィグ値でコンフィグチェックする

ビルドする
終了する

【内容】をコンソール出力する手順
	「[[][今を「yyyy/MM/dd HH:mm:ss」に整えたもの][]] [内容]」をコンソールへ表示して改行する
終わり

ビルドする手順
	「ビルド開始[改行]」をコンソール出力する
	
	アプリ名=「[アプリの名前]」
	もしアプリのリリースチャンネルが「beta」なら // Beta
		ビルド番号=「[アプリのリリース番号]」
		インストーラーソースファイル=「[今の位置]Source\_Setup\LegendUtil_Setup.iss」
		
	他でもしアプリのリリースチャンネルが「dev」なら // Dev
		アプリ名=「[アプリの名前] Dev Build」
		ビルド番号=「[ビルド日時]」
		インストーラーソースファイル=「[今の位置]Source\_Setup\LegendUtil_Setup_Dev.iss」
		
	そうでなければ // Release とかその他
		ビルド番号=「」
		インストーラーソースファイル=「[今の位置]Source\_Setup\LegendUtil_Setup.iss」
		
	もし終わり
	もし(ビルド番号が「.」で始まらない)かつ(ビルド番号が無でない)ならビルド番号=「.」&ビルド番号
	
	//インストーラーのバージョン情報を更新
	「インストーラーのバージョン情報を更新」をコンソール出力する
	変数一覧={
		「MyAppName」=「[アプリ名]」,
		「MyAppVersion」=「[アプリのバージョン]」,
		「MyAppReleaseChannel」=「[アプリのリリースチャンネル]」,
		「MyAppReleaseNumber」=「[アプリのリリース番号]」,
		「MyAppVersionText」=「[アプリのバージョン]-[アプリのリリースチャンネル][ビルド番号]」
	}
	インストーラーソースファイルテキスト=インストーラーソースファイルから読み込んだもの
	変数一覧の見出しを変数名へそれぞれ繰り返す
		インストーラーソースファイルテキスト=インストーラーソースファイルテキストで「#define [変数名] "[インストーラーソースファイルテキストで「#define [変数名] "」から「"」まで抽出したもの(1)]"」を「#define [変数名] "[変数一覧(変数名)]"」へ置き換えたもの
	繰り返し終わり
	インストーラーソースファイルテキストをインストーラーソースファイルへ保存する
	
	ソースファイルをコンパイルする
	
	もし「[今の位置]_Pack\[アプリの名前]\[ソースファイルの名前だけ].exe」というファイルが存在するなら
		「実行ファイルを削除 ([今の位置]_Pack\[ソースファイルの名前だけ].exe)」をコンソール出力する
		「[今の位置]_Pack\[アプリの名前]\[ソースファイルの名前だけ].exe」を削除する
	もし終わり
	「実行ファイルを移動 ([ソースファイルの名前だけ].exe)」をコンソール出力する
	「[今の位置][ソースファイルの名前だけ].exe」を「[今の位置]_Pack\[アプリの名前]\[ソースファイルの名前だけ].exe」へ移動する
	0.1秒待つ
	インストーラーソースファイルをコンパイルする
	
	「Build Version: [ビルド日時] ([ビルド日時で「.」を「」へ置換したもの])」をコンソール出力する
	
	// リリース
	もしアプリのリリースチャンネルが「dev」なら
		「リリースを行う場合は y を入力してください: 」をコンソールへ表示する
		コンソールから受け取ったものについて分岐
		「y」の場合
			「コミットメッセージを入力: 」をコンソールへ表示する
			コンソールから受け取ったものでリリースする
		分岐終わり
	もし終わり
終わり

【ソースファイル】をコンパイル手順
	もしソースファイルの拡張子だけが「rdrproj」なら
		「 [ソースファイル] をコンパイル中」をコンソール出力する
		コンパイラープロセス=「"[メイン設定について「Main」から「ProduireCompiler_Path」を取得したもの]"」を「"[ソースファイル]"」として「裏」で起動したもの
		繰り返す
			もしコンパイラープロセスの起動中が×なら繰り返しから抜け出す
			0.1秒待つ
		繰り返し終わり
		もしコンパイラープロセスの終了コードが0なら
			「ソースコードのコンパイル完了 - 戻り値: [コンパイラープロセスの終了コード]」をコンソール出力する
			
		そうでなければ
			もし"ソースコードコンパイル試行回数">3なら
				「ソースコードのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード] ([ソースコードコンパイル試行数]回目)[改行][プログラムのタイトル] を終了します...」をコンソール出力する
				3秒待つ
				終了する
				
			そうでなければ
				「ソースコードのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード][改行]秒後に再試行します...」をコンソール出力する
				1秒待つ
				ソースコードコンパイル試行回数=ソースコードコンパイル試行数+1
				ソースファイルをコンパイルする
				
			もし終わり
		
		もし終わり
	
	他でもしソースファイルの拡張子だけが「iss」なら
		「インストーラーをコンパイル中」をコンソール出力する
		コンパイラープロセス=「"[メイン設定について「Main」から「InstallerCompiler_Path」を取得したもの]"」を「"[ソースファイル]"」として「裏」で起動したもの
		繰り返す
			もしコンパイラープロセスの起動中が×なら繰り返しから抜け出す
			0.1秒待つ
		繰り返し終わり
		もしコンパイラープロセスの終了コードが0なら
			「インストーラーのコンパイル完了 - 戻り値: [コンパイラープロセスの終了コード]」をコンソール出力する
			
		そうでなければ
			もしインストーラーコンパイル試行数>3なら
				「インストーラーのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード] ([インストーラーコンパイル試行数]回目)[改行][プログラムのタイトル] を終了します...」をコンソール出力する
				3秒待つ
				終了する
				
			そうでなければ
				「インストーラーのコンパイル失敗 - 戻り値: [コンパイラープロセスの終了コード][改行]2秒後に再試行します...」をコンソール出力する
				2秒待つ
				インストーラーコンパイル試行数=インストーラーコンパイル試行数+1
				ソースファイルをコンパイルする
				
			もし終わり
		
		もし終わり
		
	もし終わり
終わり

〈【コミットメッセージ:文字列】で〉リリースする手順
	もしコミットメッセージが無ならコミットメッセージ=「」
	
	もし[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]というフォルダが存在しないなら
		「リリース処理失敗: フォルダーが見つかりません。」をコンソール出力する
	もし終わり
	
	リリース先フォルダー=「[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]\Pack\[アプリのバージョン]-[アプリのリリースチャンネル][ビルド番号]\」
	もしリリース先フォルダーというフォルダが存在しないなら「[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]」へ「Pack\[アプリのバージョン]-[アプリのリリースチャンネル][ビルド番号]」というフォルダを作成する
	
	// Pull
	「cd "[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]" & git checkout releases/dev & git pull origin releases/dev & echo [ビルド番号]> "[今の位置]BuildVersion.txt"」をコマンド実行したものをコンソール出力する
	
	リリース設定という設定ファイルを作る
		そのファイル名=「[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]\Releases.ini」
	リリース設定について「Latest」で「Version」へ「[アプリのバージョン]」を設定する
	リリース設定について「Latest」で「InternalVersion」へ「[アプリの内部バージョン]」を設定する
	リリース設定について「Latest」で「ReleaseChannel」へ「[アプリのリリースチャンネル]」を設定する
	リリース設定について「Latest」で「BuildVersion」へ「[ビルド番号]」を設定する
	リリース設定について「Latest」で「InstallerFileName」へ「[ソースファイルの名前だけ]_Setup.exe」を設定する
	
	コマンド一覧={
		「cd "[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]"」,
		「git checkout releases/dev」,
		「git add "[メイン設定について「Main」から「Dev_Build_Releases_Brunch_Folder」を取得したもの]\Releases.ini"」,
		「git add "[リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe"」,
		「git commit -m "Version [アプリのバージョン]-[アプリのリリースチャンネル][ビルド番号]" -m "- [コミットメッセージ]"」,
		「git push origin releases/dev」
	}
	
	例外監視
		「[今の位置]_Pack\[ソースファイルの名前だけ]_Setup.exe」を「[リリース先フォルダー][ソースファイルの名前だけ]_Setup.exe」へコピーする
		
		「」をコンソールへ表示して改行する
		
		コマンド一覧を「 & 」で繋げたものをコマンド実行したものをコンソールへ表示して改行する
	発生した場合
		「リリース処理失敗: [エラーのメッセージ]」をコンソール出力する
	監視終わり
終わり

【初期値】でコンフィグチェックする手順
	メイン設定という設定ファイルを作る
	メイン設定のファイル名=「[今の位置]BuilderConfig.ini」
	メイン設定について「Info」で「CreatedDate」へ「[今]」を設定する
	
	初期値の見出しを【コンフィグ親キー】へそれぞれ繰り返す
		初期値(コンフィグ親キー)の見出しを【コンフィグキー】へそれぞれ繰り返す
			もし[メイン設定についてコンフィグ親キーからコンフィグキーを取得したもの]が空ならメイン設定についてコンフィグ親キーでコンフィグキーへ[初期値(コンフィグ親キー)(コンフィグキー)]を設定する
		繰り返し終わり
	繰り返し終わり
終わり
